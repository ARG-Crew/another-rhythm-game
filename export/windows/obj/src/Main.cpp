// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_ClientPrefs
#include <ClientPrefs.h>
#endif
#ifndef INCLUDED_ClientSave
#include <ClientSave.h>
#endif
#ifndef INCLUDED_IntroState
#include <IntroState.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxefmod_FmodManager
#include <haxefmod/FmodManager.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeWindow
#include <lime/_internal/backend/native/NativeWindow.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_system_DisplayMode
#include <lime/system/DisplayMode.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_native_Windows
#include <native/Windows.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_LoaderInfo
#include <openfl/display/LoaderInfo.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_events_UncaughtErrorEvent
#include <openfl/events/UncaughtErrorEvent.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e47a9afac0942eb9_14_new,"Main","new",0x6616a5cb,"Main.new","Main.hx",14,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_47_upgradeFullscreen,"Main","upgradeFullscreen",0x5c22a8a2,"Main.upgradeFullscreen","Main.hx",47,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_45_upgradeFullscreen,"Main","upgradeFullscreen",0x5c22a8a2,"Main.upgradeFullscreen","Main.hx",45,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_66_onUncaughtError,"Main","onUncaughtError",0x63b2ca3f,"Main.onUncaughtError","Main.hx",66,0x087e5c05)

void Main_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_14_new)
HXLINE(  15)		::openfl::Lib_obj::get_current()->get_loaderInfo()->addEventListener(HX_("uncaughtError",f3,98,8b,8b),this->onUncaughtError_dyn(),null(),null(),null());
HXLINE(  17)		this->upgradeFullscreen();
HXLINE(  19)		::native::Windows_obj::setDarkMode(true);
HXLINE(  22)		int framerate = ::openfl::Lib_obj::get_current()->stage->application->_hx___window->get_displayMode()->refreshRate;
HXLINE(  23)		super::__construct(1920,1080,::hx::ClassOf< ::IntroState >(),framerate,framerate,false,false);
HXLINE(  25)		::haxefmod::FmodManager_obj::EnableDebugMessages();
HXLINE(  27)		::flixel::FlxSprite_obj::defaultAntialiasing = true;
HXLINE(  29)		::flixel::FlxG_obj::mouse->set_useSystemCursor(true);
            	}

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

void *Main_obj::_hx_vtable = 0;

Dynamic Main_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Main_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x07825a7d) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x07825a7d;
			}
		} else {
			return inClassId==(int)0x0c89e854 || inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x4af7dd8e) {
			return inClassId==(int)0x43384a08 || inClassId==(int)0x4af7dd8e;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void Main_obj::upgradeFullscreen(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0,::Array< bool >,windowFullscreen) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_47_upgradeFullscreen)
HXLINE(  48)			if ((::ClientPrefs_obj::data->displayType != HX_("Borderless",65,4a,22,0e))) {
HXLINE(  49)				return;
            			}
HXLINE(  51)			::openfl::Lib_obj::get_current()->stage->application->_hx___window->set_fullscreen(false);
HXLINE(  52)			if (!(windowFullscreen->__get(0))) {
HXLINE(  53)				::openfl::Lib_obj::get_current()->stage->application->_hx___window->set_borderless(true);
HXLINE(  54)				{
HXLINE(  54)					 ::lime::ui::Window _this = ::openfl::Lib_obj::get_current()->stage->application->_hx___window;
HXDLIN(  54)					_this->_hx___minimized = false;
HXDLIN(  54)					_this->_hx___maximized = _this->_hx___backend->setMaximized(true);
            				}
HXLINE(  55)				windowFullscreen[0] = true;
            			}
            			else {
HXLINE(  57)				{
HXLINE(  57)					 ::lime::ui::Window _this1 = ::openfl::Lib_obj::get_current()->stage->application->_hx___window;
HXDLIN(  57)					_this1->_hx___minimized = false;
HXDLIN(  57)					_this1->_hx___maximized = _this1->_hx___backend->setMaximized(false);
            				}
HXLINE(  58)				::openfl::Lib_obj::get_current()->stage->application->_hx___window->set_borderless(false);
HXLINE(  59)				windowFullscreen[0] = false;
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_45_upgradeFullscreen)
HXLINE(  46)		::Array< bool > windowFullscreen = ::Array_obj< bool >::__new(1)->init(0,!(::openfl::Lib_obj::get_current()->stage->application->_hx___window->_hx___fullscreen));
HXLINE(  47)		 ::Dynamic onFullscreen =  ::Dynamic(new _hx_Closure_0(windowFullscreen));
HXLINE(  62)		onFullscreen();
HXLINE(  63)		 ::lime::ui::Window _hx_tmp = ::openfl::Lib_obj::get_current()->stage->application->_hx___window;
HXDLIN(  63)		_hx_tmp->onFullscreen->add(onFullscreen,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Main_obj,upgradeFullscreen,(void))

void Main_obj::onUncaughtError( ::openfl::events::UncaughtErrorEvent e){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_66_onUncaughtError)
HXLINE(  67)		 ::lime::ui::Window _hx_tmp = ::openfl::Lib_obj::get_current()->stage->application->_hx___window;
HXDLIN(  67)		_hx_tmp->alert(::Std_obj::string(e),HX_("Error!",79,f7,fc,85));
HXLINE(  68)		::Sys_obj::exit(1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Main_obj,onUncaughtError,(void))


::hx::ObjectPtr< Main_obj > Main_obj::__new() {
	::hx::ObjectPtr< Main_obj > __this = new Main_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Main_obj > Main_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Main_obj *__this = (Main_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Main_obj), true, "Main"));
	*(void **)__this = Main_obj::_hx_vtable;
	flixel::FlxGame_obj::__alloc_dynamic_functions(_hx_ctx,__this);
	__this->__construct();
	return __this;
}

Main_obj::Main_obj()
{
}

::hx::Val Main_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"onUncaughtError") ) { return ::hx::Val( onUncaughtError_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"upgradeFullscreen") ) { return ::hx::Val( upgradeFullscreen_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Main_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Main_obj_sStaticStorageInfo = 0;
#endif

static ::String Main_obj_sMemberFields[] = {
	HX_("upgradeFullscreen",f7,4d,c9,85),
	HX_("onUncaughtError",54,00,10,13),
	::String(null()) };

::hx::Class Main_obj::__mClass;

void Main_obj::__register()
{
	Main_obj _hx_dummy;
	Main_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Main",59,64,2f,33);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Main_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Main_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

