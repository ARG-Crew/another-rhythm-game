// Generated by Haxe 4.2.0
#include <hxcpp.h>

#ifndef INCLUDED_Button
#include <Button.h>
#endif
#ifndef INCLUDED_Palette
#include <Palette.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_hxAddons_HxBitmapSprite
#include <hxAddons/HxBitmapSprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_media_SoundTransform
#include <openfl/media/SoundTransform.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_95476733ad03172e_9_new,"Button","new",0x9489e804,"Button.new","Button.hx",9,0xf1be03ec)
HX_LOCAL_STACK_FRAME(_hx_pos_95476733ad03172e_48_keyPress,"Button","keyPress",0x3ccfaf40,"Button.keyPress","Button.hx",48,0xf1be03ec)
HX_LOCAL_STACK_FRAME(_hx_pos_95476733ad03172e_84_update,"Button","update",0x98decce5,"Button.update","Button.hx",84,0xf1be03ec)

void Button_obj::__construct(int id,::String skin){
            	HX_STACKFRAME(&_hx_pos_95476733ad03172e_9_new)
HXLINE(  11)		this->id = 0;
HXLINE(  16)		super::__construct(null(),null(),null());
HXLINE(  17)		this->id = id;
HXLINE(  18)		this->skin = skin;
HXLINE(  20)		Float offsetX = ( (Float)(100) );
HXLINE(  21)		Float offsetY = ( (Float)(100) );
HXLINE(  23)		Float spaceX = ( (Float)(20) );
HXLINE(  24)		Float spaceY = ( (Float)(20) );
HXLINE(  26)		this->loadBitmap(((HX_("assets/images/buttons/",79,11,5e,1a) + skin) + HX_(".png",3b,2d,bd,1e)));
HXLINE(  27)		this->setGraphicSize(::Std_obj::_hx_int((this->get_width() * ((Float)0.7))),null());
HXLINE(  28)		this->updateHitbox();
HXLINE(  29)		this->set_antialiasing(true);
HXLINE(  30)		this->set_color(::Palette_obj::released);
HXLINE(  32)		switch((int)(id)){
            			case (int)0: {
HXLINE(  34)				this->setPosition(offsetX,offsetY);
            			}
            			break;
            			case (int)1: {
HXLINE(  35)				this->setPosition(((offsetX + spaceX) + this->get_width()),offsetY);
            			}
            			break;
            			case (int)2: {
HXLINE(  36)				this->setPosition((offsetX + ((spaceX + this->get_width()) * ( (Float)(2) ))),offsetY);
            			}
            			break;
            			case (int)3: {
HXLINE(  37)				this->setPosition(offsetX,((offsetY + spaceY) + this->get_height()));
            			}
            			break;
            			case (int)4: {
HXLINE(  38)				Float _hx_tmp = ((offsetX + spaceX) + this->get_width());
HXDLIN(  38)				this->setPosition(_hx_tmp,((offsetY + spaceY) + this->get_height()));
            			}
            			break;
            			case (int)5: {
HXLINE(  39)				Float _hx_tmp = (offsetX + ((spaceX + this->get_width()) * ( (Float)(2) )));
HXDLIN(  39)				this->setPosition(_hx_tmp,((offsetY + spaceY) + this->get_height()));
            			}
            			break;
            			case (int)6: {
HXLINE(  40)				this->setPosition(offsetX,(offsetY + ((spaceY + this->get_height()) * ( (Float)(2) ))));
            			}
            			break;
            			case (int)7: {
HXLINE(  41)				Float _hx_tmp = ((offsetX + spaceX) + this->get_width());
HXDLIN(  41)				this->setPosition(_hx_tmp,(offsetY + ((spaceY + this->get_height()) * ( (Float)(2) ))));
            			}
            			break;
            			case (int)8: {
HXLINE(  42)				Float _hx_tmp = (offsetX + ((spaceX + this->get_width()) * ( (Float)(2) )));
HXDLIN(  42)				this->setPosition(_hx_tmp,(offsetY + ((spaceY + this->get_height()) * ( (Float)(2) ))));
            			}
            			break;
            		}
            	}

Dynamic Button_obj::__CreateEmpty() { return new Button_obj; }

void *Button_obj::_hx_vtable = 0;

Dynamic Button_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Button_obj > _hx_result = new Button_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Button_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x6fbf98d2) {
		if (inClassId<=(int)0x2c01639b) {
			if (inClassId<=(int)0x2a66050f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x2a66050f;
			} else {
				return inClassId==(int)0x2c01639b;
			}
		} else {
			return inClassId==(int)0x6fbf98d2;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void Button_obj::keyPress(){
            	HX_STACKFRAME(&_hx_pos_95476733ad03172e_48_keyPress)
HXDLIN(  48)		if (this->active) {
HXLINE(  50)			bool _hx_tmp;
HXDLIN(  50)			if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(  50)				_hx_tmp = ::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel );
            			}
            			else {
HXLINE(  50)				_hx_tmp = false;
            			}
HXDLIN(  50)			if (_hx_tmp) {
HXLINE(  52)				if (::hx::IsEq( ::PlayState_obj::instance->notes->__get(0)->__GetItem(0),this->id )) {
HXLINE(  54)					if (::hx::IsEq( ::PlayState_obj::instance->notes->__get(0)->__GetItem(0)->__GetItem(1),::flixel::FlxG_obj::sound->music->_time )) {
HXLINE(  56)						this->set_color(::Palette_obj::confirmed);
HXLINE(  57)						::PlayState_obj::instance->notes->shift();
HXLINE(  58)						::openfl::media::Sound_obj::fromFile(HX_("assets/sounds/Pressed.mp3",c5,d7,af,e2))->play(null(),null(),null());
            					}
            					else {
HXLINE(  62)						this->set_color(::Palette_obj::pressed);
HXLINE(  63)						::openfl::media::Sound_obj::fromFile(HX_("assets/sounds/Miss.mp3",3d,d6,15,67))->play(null(),null(),null());
            					}
            				}
            			}
            			else {
HXLINE(  69)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  69)				if (_this->keyManager->checkStatusUnsafe(70,_this->status)) {
HXLINE(  71)					this->set_color(::Palette_obj::confirmed);
HXLINE(  72)					::openfl::media::Sound_obj::fromFile(HX_("assets/sounds/Pressed.mp3",c5,d7,af,e2))->play(null(),null(),null());
            				}
            				else {
HXLINE(  76)					this->set_color(::Palette_obj::pressed);
HXLINE(  77)					::openfl::media::Sound_obj::fromFile(HX_("assets/sounds/Miss.mp3",3d,d6,15,67))->play(null(),null(),null());
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Button_obj,keyPress,(void))

void Button_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_95476733ad03172e_84_update)
HXLINE(  85)		 ::flixel::input::keyboard::FlxKeyList press = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXLINE(  86)		 ::flixel::input::keyboard::FlxKeyList release = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justReleased) );
HXLINE(  88)		switch((int)(this->id)){
            			case (int)0: {
HXLINE(  91)				if (press->keyManager->checkStatusUnsafe(103,press->status)) {
HXLINE(  92)					this->keyPress();
            				}
HXLINE(  93)				if (release->keyManager->checkStatusUnsafe(103,release->status)) {
HXLINE(  94)					this->set_color(::Palette_obj::released);
            				}
            			}
            			break;
            			case (int)1: {
HXLINE(  96)				if (press->keyManager->checkStatusUnsafe(104,press->status)) {
HXLINE(  97)					this->keyPress();
            				}
HXLINE(  98)				if (release->keyManager->checkStatusUnsafe(104,release->status)) {
HXLINE(  99)					this->set_color(::Palette_obj::released);
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 101)				if (press->keyManager->checkStatusUnsafe(105,press->status)) {
HXLINE( 102)					this->keyPress();
            				}
HXLINE( 103)				if (release->keyManager->checkStatusUnsafe(105,release->status)) {
HXLINE( 104)					this->set_color(::Palette_obj::released);
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 106)				if (press->keyManager->checkStatusUnsafe(100,press->status)) {
HXLINE( 107)					this->keyPress();
            				}
HXLINE( 108)				if (release->keyManager->checkStatusUnsafe(100,release->status)) {
HXLINE( 109)					this->set_color(::Palette_obj::released);
            				}
            			}
            			break;
            			case (int)4: {
HXLINE( 111)				if (press->keyManager->checkStatusUnsafe(101,press->status)) {
HXLINE( 112)					this->keyPress();
            				}
HXLINE( 113)				if (release->keyManager->checkStatusUnsafe(101,release->status)) {
HXLINE( 114)					this->set_color(::Palette_obj::released);
            				}
            			}
            			break;
            			case (int)5: {
HXLINE( 116)				if (press->keyManager->checkStatusUnsafe(102,press->status)) {
HXLINE( 117)					this->keyPress();
            				}
HXLINE( 118)				if (release->keyManager->checkStatusUnsafe(102,release->status)) {
HXLINE( 119)					this->set_color(::Palette_obj::released);
            				}
            			}
            			break;
            			case (int)6: {
HXLINE( 121)				if (press->keyManager->checkStatusUnsafe(97,press->status)) {
HXLINE( 122)					this->keyPress();
            				}
HXLINE( 123)				if (release->keyManager->checkStatusUnsafe(97,release->status)) {
HXLINE( 124)					this->set_color(::Palette_obj::released);
            				}
            			}
            			break;
            			case (int)7: {
HXLINE( 126)				if (press->keyManager->checkStatusUnsafe(98,press->status)) {
HXLINE( 127)					this->keyPress();
            				}
HXLINE( 128)				if (release->keyManager->checkStatusUnsafe(98,release->status)) {
HXLINE( 129)					this->set_color(::Palette_obj::released);
            				}
            			}
            			break;
            			case (int)8: {
HXLINE( 131)				if (press->keyManager->checkStatusUnsafe(99,press->status)) {
HXLINE( 132)					this->keyPress();
            				}
HXLINE( 133)				if (release->keyManager->checkStatusUnsafe(99,release->status)) {
HXLINE( 134)					this->set_color(::Palette_obj::released);
            				}
            			}
            			break;
            		}
            	}



::hx::ObjectPtr< Button_obj > Button_obj::__new(int id,::String skin) {
	::hx::ObjectPtr< Button_obj > __this = new Button_obj();
	__this->__construct(id,skin);
	return __this;
}

::hx::ObjectPtr< Button_obj > Button_obj::__alloc(::hx::Ctx *_hx_ctx,int id,::String skin) {
	Button_obj *__this = (Button_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Button_obj), true, "Button"));
	*(void **)__this = Button_obj::_hx_vtable;
	__this->__construct(id,skin);
	return __this;
}

Button_obj::Button_obj()
{
}

void Button_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Button);
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(skin,"skin");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Button_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(skin,"skin");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Button_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return ::hx::Val( id ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"skin") ) { return ::hx::Val( skin ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"keyPress") ) { return ::hx::Val( keyPress_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Button_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"skin") ) { skin=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Button_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("skin",7d,16,55,4c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Button_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Button_obj,id),HX_("id",db,5b,00,00)},
	{::hx::fsString,(int)offsetof(Button_obj,skin),HX_("skin",7d,16,55,4c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Button_obj_sStaticStorageInfo = 0;
#endif

static ::String Button_obj_sMemberFields[] = {
	HX_("id",db,5b,00,00),
	HX_("skin",7d,16,55,4c),
	HX_("keyPress",64,f9,f1,0c),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class Button_obj::__mClass;

void Button_obj::__register()
{
	Button_obj _hx_dummy;
	Button_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Button",12,d6,74,0e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Button_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Button_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Button_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Button_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

