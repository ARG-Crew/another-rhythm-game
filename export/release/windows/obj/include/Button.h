// Generated by Haxe 4.2.0
#ifndef INCLUDED_Button
#define INCLUDED_Button

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_hxAddons_HxBitmapSprite
#include <hxAddons/HxBitmapSprite.h>
#endif
HX_DECLARE_CLASS0(Button)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(hxAddons,HxBitmapSprite)



class HXCPP_CLASS_ATTRIBUTES Button_obj : public  ::hxAddons::HxBitmapSprite_obj
{
	public:
		typedef  ::hxAddons::HxBitmapSprite_obj super;
		typedef Button_obj OBJ_;
		Button_obj();

	public:
		enum { _hx_ClassId = 0x6fbf98d2 };

		void __construct(int id,::String skin);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Button")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"Button"); }
		static ::hx::ObjectPtr< Button_obj > __new(int id,::String skin);
		static ::hx::ObjectPtr< Button_obj > __alloc(::hx::Ctx *_hx_ctx,int id,::String skin);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Button_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Button",12,d6,74,0e); }

		int id;
		::String skin;
		void keyPress();
		::Dynamic keyPress_dyn();

		void update(Float elapsed);

};


#endif /* INCLUDED_Button */ 
