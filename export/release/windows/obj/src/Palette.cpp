// Generated by Haxe 4.2.0
#include <hxcpp.h>

#ifndef INCLUDED_Palette
#include <Palette.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_9e0c36d56da59d6a_18_parse,"Palette","parse",0xfadd99e0,"Palette.parse","Palette.hx",18,0xfcc53343)
HX_LOCAL_STACK_FRAME(_hx_pos_9e0c36d56da59d6a_11_boot,"Palette","boot",0x9aed0f25,"Palette.boot","Palette.hx",11,0xfcc53343)
HX_LOCAL_STACK_FRAME(_hx_pos_9e0c36d56da59d6a_12_boot,"Palette","boot",0x9aed0f25,"Palette.boot","Palette.hx",12,0xfcc53343)
HX_LOCAL_STACK_FRAME(_hx_pos_9e0c36d56da59d6a_13_boot,"Palette","boot",0x9aed0f25,"Palette.boot","Palette.hx",13,0xfcc53343)
HX_LOCAL_STACK_FRAME(_hx_pos_9e0c36d56da59d6a_14_boot,"Palette","boot",0x9aed0f25,"Palette.boot","Palette.hx",14,0xfcc53343)

void Palette_obj::__construct() { }

Dynamic Palette_obj::__CreateEmpty() { return new Palette_obj; }

void *Palette_obj::_hx_vtable = 0;

Dynamic Palette_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Palette_obj > _hx_result = new Palette_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Palette_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x16eb32b7;
}

int Palette_obj::bg;

int Palette_obj::released;

int Palette_obj::pressed;

int Palette_obj::confirmed;

void Palette_obj::parse(::String file){
            	HX_STACKFRAME(&_hx_pos_9e0c36d56da59d6a_18_parse)
HXDLIN(  18)		if (::sys::FileSystem_obj::exists(file)) {
HXLINE(  20)			::Array< ::String > array = ::sys::io::File_obj::getContent(file).split(HX_("\n",0a,00,00,00));
HXLINE(  21)			::Palette_obj::bg = ( (int)(::Std_obj::parseInt((HX_("0xff",88,a5,15,20) + array->__get(0)))) );
HXLINE(  23)			::Array< ::String > butts = array->__get(1).split(HX_(" ",20,00,00,00));
HXLINE(  24)			::Palette_obj::released = ( (int)(::Std_obj::parseInt((HX_("0xff",88,a5,15,20) + butts->__get(0)))) );
HXLINE(  25)			::Palette_obj::pressed = ( (int)(::Std_obj::parseInt((HX_("0xff",88,a5,15,20) + butts->__get(1)))) );
HXLINE(  26)			::Palette_obj::confirmed = ( (int)(::Std_obj::parseInt((HX_("0xff",88,a5,15,20) + butts->__get(2)))) );
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Palette_obj,parse,(void))


Palette_obj::Palette_obj()
{
}

bool Palette_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { outValue = ( bg ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"parse") ) { outValue = parse_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pressed") ) { outValue = ( pressed ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"released") ) { outValue = ( released ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"confirmed") ) { outValue = ( confirmed ); return true; }
	}
	return false;
}

bool Palette_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=ioValue.Cast< int >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pressed") ) { pressed=ioValue.Cast< int >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"released") ) { released=ioValue.Cast< int >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"confirmed") ) { confirmed=ioValue.Cast< int >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Palette_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Palette_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Palette_obj::bg,HX_("bg",c5,55,00,00)},
	{::hx::fsInt,(void *) &Palette_obj::released,HX_("released",bd,88,e7,76)},
	{::hx::fsInt,(void *) &Palette_obj::pressed,HX_("pressed",a2,d2,e6,39)},
	{::hx::fsInt,(void *) &Palette_obj::confirmed,HX_("confirmed",5f,35,9b,c7)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Palette_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Palette_obj::bg,"bg");
	HX_MARK_MEMBER_NAME(Palette_obj::released,"released");
	HX_MARK_MEMBER_NAME(Palette_obj::pressed,"pressed");
	HX_MARK_MEMBER_NAME(Palette_obj::confirmed,"confirmed");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Palette_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Palette_obj::bg,"bg");
	HX_VISIT_MEMBER_NAME(Palette_obj::released,"released");
	HX_VISIT_MEMBER_NAME(Palette_obj::pressed,"pressed");
	HX_VISIT_MEMBER_NAME(Palette_obj::confirmed,"confirmed");
};

#endif

::hx::Class Palette_obj::__mClass;

static ::String Palette_obj_sStaticFields[] = {
	HX_("bg",c5,55,00,00),
	HX_("released",bd,88,e7,76),
	HX_("pressed",a2,d2,e6,39),
	HX_("confirmed",5f,35,9b,c7),
	HX_("parse",33,90,55,bd),
	::String(null())
};

void Palette_obj::__register()
{
	Palette_obj _hx_dummy;
	Palette_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Palette",5b,ba,b4,39);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Palette_obj::__GetStatic;
	__mClass->mSetStaticField = &Palette_obj::__SetStatic;
	__mClass->mMarkFunc = Palette_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Palette_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Palette_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Palette_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Palette_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Palette_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Palette_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_9e0c36d56da59d6a_11_boot)
HXDLIN(  11)		bg = -16777216;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9e0c36d56da59d6a_12_boot)
HXDLIN(  12)		released = -1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9e0c36d56da59d6a_13_boot)
HXDLIN(  13)		pressed = -65536;
            	}
{
            	HX_STACKFRAME(&_hx_pos_9e0c36d56da59d6a_14_boot)
HXDLIN(  14)		confirmed = -10027213;
            	}
}

