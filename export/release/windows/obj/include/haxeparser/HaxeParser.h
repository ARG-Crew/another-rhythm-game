// Generated by Haxe 4.2.0
#ifndef INCLUDED_haxeparser_HaxeParser
#define INCLUDED_haxeparser_HaxeParser

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(haxeparser,HaxeParser)
HX_DECLARE_CLASS1(hscript,Interp)
HX_DECLARE_CLASS1(hscript,Parser)

namespace haxeparser{


class HXCPP_CLASS_ATTRIBUTES HaxeParser_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef HaxeParser_obj OBJ_;
		HaxeParser_obj();

	public:
		enum { _hx_ClassId = 0x3cfa744a };

		void __construct(::String path);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="haxeparser.HaxeParser")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"haxeparser.HaxeParser"); }
		static ::hx::ObjectPtr< HaxeParser_obj > __new(::String path);
		static ::hx::ObjectPtr< HaxeParser_obj > __alloc(::hx::Ctx *_hx_ctx,::String path);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~HaxeParser_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("HaxeParser",c5,e9,24,5c); }

		static void __boot();
		static  ::hscript::Parser parser;
		 ::hscript::Interp interp;
		 ::haxe::ds::StringMap get_variables();
		::Dynamic get_variables_dyn();

		void callFunction(::String event,::cpp::VirtualArray args);
		::Dynamic callFunction_dyn();

		void addCallback(::String name, ::Dynamic value);
		::Dynamic addCallback_dyn();

};

} // end namespace haxeparser

#endif /* INCLUDED_haxeparser_HaxeParser */ 
