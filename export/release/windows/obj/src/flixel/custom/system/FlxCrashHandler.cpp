// Generated by Haxe 4.2.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_flixel_custom_system_FlxCrashHandler
#include <flixel/custom/system/FlxCrashHandler.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_haxe__CallStack_CallStack_Impl_
#include <haxe/_CallStack/CallStack_Impl_.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_LoaderInfo
#include <openfl/display/LoaderInfo.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_events_UncaughtErrorEvent
#include <openfl/events/UncaughtErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_UncaughtErrorEvents
#include <openfl/events/UncaughtErrorEvents.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6d6f0e3c42d3640f_21_new,"flixel.custom.system.FlxCrashHandler","new",0xb6e47f93,"flixel.custom.system.FlxCrashHandler.new","flixel/custom/system/FlxCrashHandler.hx",21,0x875df15e)
HX_LOCAL_STACK_FRAME(_hx_pos_6d6f0e3c42d3640f_27_onCrash,"flixel.custom.system.FlxCrashHandler","onCrash",0x9e1122fb,"flixel.custom.system.FlxCrashHandler.onCrash","flixel/custom/system/FlxCrashHandler.hx",27,0x875df15e)
HX_LOCAL_STACK_FRAME(_hx_pos_6d6f0e3c42d3640f_51_format,"flixel.custom.system.FlxCrashHandler","format",0x8f0b21e4,"flixel.custom.system.FlxCrashHandler.format","flixel/custom/system/FlxCrashHandler.hx",51,0x875df15e)
namespace flixel{
namespace custom{
namespace _hx_system{

void FlxCrashHandler_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_6d6f0e3c42d3640f_21_new)
HXLINE(  22)		super::__construct();
HXLINE(  23)		::openfl::Lib_obj::get_current()->get_loaderInfo()->uncaughtErrorEvents->addEventListener(HX_("uncaughtError",f3,98,8b,8b),this->onCrash_dyn(),null(),null(),null());
            	}

Dynamic FlxCrashHandler_obj::__CreateEmpty() { return new FlxCrashHandler_obj; }

void *FlxCrashHandler_obj::_hx_vtable = 0;

Dynamic FlxCrashHandler_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxCrashHandler_obj > _hx_result = new FlxCrashHandler_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxCrashHandler_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1f4df417) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x1f4df417;
		}
	} else {
		if (inClassId<=(int)0x5ea19599) {
			return inClassId==(int)0x4af7dd8e || inClassId==(int)0x5ea19599;
		} else {
			return inClassId==(int)0x6b353933;
		}
	}
}

void FlxCrashHandler_obj::onCrash( ::openfl::events::UncaughtErrorEvent e){
            	HX_STACKFRAME(&_hx_pos_6d6f0e3c42d3640f_27_onCrash)
HXLINE(  28)		::String name = this->format(::lime::app::Application_obj::current->meta->get_string(HX_("title",98,15,3b,10)));
HXLINE(  30)		::String errMsg = HX_("",00,00,00,00);
HXLINE(  32)		::Array< ::Dynamic> callStack = ::haxe::_CallStack::CallStack_Impl__obj::exceptionStack(true);
HXLINE(  33)		{
HXLINE(  33)			int _g = 0;
HXDLIN(  33)			while((_g < callStack->length)){
HXLINE(  33)				 ::haxe::StackItem stackItem = callStack->__get(_g).StaticCast<  ::haxe::StackItem >();
HXDLIN(  33)				_g = (_g + 1);
HXLINE(  35)				if ((stackItem->_hx_getIndex() == 2)) {
HXLINE(  37)					 ::haxe::StackItem s = stackItem->_hx_getObject(0).StaticCast<  ::haxe::StackItem >();
HXDLIN(  37)					::String file = stackItem->_hx_getString(1);
HXDLIN(  37)					int line = stackItem->_hx_getInt(2);
HXDLIN(  37)					 ::Dynamic column = stackItem->_hx_getObject(3);
HXLINE(  38)					errMsg = (errMsg + (((file + HX_(" (line ",a4,24,f7,a5)) + line) + HX_(")\n",c1,23,00,00)));
            				}
            				else {
HXLINE(  40)					::Sys_obj::println(stackItem);
            				}
            			}
            		}
HXLINE(  44)		errMsg = (errMsg + (HX_("\nUncaught Error: ",ed,bf,e1,72) + ::Std_obj::string(e->error)));
HXLINE(  46)		::lime::app::Application_obj::current->_hx___window->alert(errMsg,(HX_("FlixelCrashHandler/",10,98,f8,3f) + name));
HXLINE(  47)		::Sys_obj::exit(1);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCrashHandler_obj,onCrash,(void))

::String FlxCrashHandler_obj::format(::String string){
            	HX_STACKFRAME(&_hx_pos_6d6f0e3c42d3640f_51_format)
HXLINE(  52)		::String ret = string;
HXLINE(  53)		ret = ::StringTools_obj::replace(ret,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00));
HXLINE(  54)		ret = ::StringTools_obj::replace(ret,HX_("'",27,00,00,00),HX_("",00,00,00,00));
HXLINE(  55)		return ret;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxCrashHandler_obj,format,return )


::hx::ObjectPtr< FlxCrashHandler_obj > FlxCrashHandler_obj::__new() {
	::hx::ObjectPtr< FlxCrashHandler_obj > __this = new FlxCrashHandler_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< FlxCrashHandler_obj > FlxCrashHandler_obj::__alloc(::hx::Ctx *_hx_ctx) {
	FlxCrashHandler_obj *__this = (FlxCrashHandler_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxCrashHandler_obj), true, "flixel.custom.system.FlxCrashHandler"));
	*(void **)__this = FlxCrashHandler_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FlxCrashHandler_obj::FlxCrashHandler_obj()
{
}

::hx::Val FlxCrashHandler_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"format") ) { return ::hx::Val( format_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onCrash") ) { return ::hx::Val( onCrash_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FlxCrashHandler_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *FlxCrashHandler_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxCrashHandler_obj_sMemberFields[] = {
	HX_("onCrash",48,5e,8d,e2),
	HX_("format",37,8f,8e,fd),
	::String(null()) };

::hx::Class FlxCrashHandler_obj::__mClass;

void FlxCrashHandler_obj::__register()
{
	FlxCrashHandler_obj _hx_dummy;
	FlxCrashHandler_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.custom.system.FlxCrashHandler",21,ba,0a,c3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxCrashHandler_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxCrashHandler_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxCrashHandler_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxCrashHandler_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace custom
} // end namespace system
