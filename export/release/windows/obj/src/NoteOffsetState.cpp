// Generated by Haxe 4.2.0
#include <hxcpp.h>

#ifndef INCLUDED_NoteOffsetState
#include <NoteOffsetState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_45f66b05f2088ec0_11_new,"NoteOffsetState","new",0x000d597e,"NoteOffsetState.new","NoteOffsetState.hx",11,0x0b7adfb2)
HX_LOCAL_STACK_FRAME(_hx_pos_45f66b05f2088ec0_22_update,"NoteOffsetState","update",0x02fc03ab,"NoteOffsetState.update","NoteOffsetState.hx",22,0x0b7adfb2)

void NoteOffsetState_obj::__construct(::String music){
            	HX_STACKFRAME(&_hx_pos_45f66b05f2088ec0_11_new)
HXLINE(  12)		super::__construct(null());
HXLINE(  13)		this->music = music;
HXLINE(  15)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(  16)			 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(  16)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE(  17)		::flixel::FlxG_obj::sound->music = null();
            	}

Dynamic NoteOffsetState_obj::__CreateEmpty() { return new NoteOffsetState_obj; }

void *NoteOffsetState_obj::_hx_vtable = 0;

Dynamic NoteOffsetState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< NoteOffsetState_obj > _hx_result = new NoteOffsetState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool NoteOffsetState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x267667cc) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x267667cc;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void NoteOffsetState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_45f66b05f2088ec0_22_update)
HXLINE(  23)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  23)		if (_this->keyManager->checkStatusUnsafe(39,_this->status)) {
HXLINE(  24)			 ::flixel::_hx_system::FlxSound fh = ::flixel::FlxG_obj::sound->music;
HXDLIN(  24)			fh->set_time((fh->_time + 1));
            		}
HXLINE(  25)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  25)		if (_this1->keyManager->checkStatusUnsafe(37,_this1->status)) {
HXLINE(  26)			 ::flixel::_hx_system::FlxSound fh = ::flixel::FlxG_obj::sound->music;
HXDLIN(  26)			fh->set_time((fh->_time - ( (Float)(1) )));
            		}
HXLINE(  27)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  27)		if (_this2->keyManager->checkStatusUnsafe(38,_this2->status)) {
HXLINE(  28)			::haxe::Log_obj::trace(::flixel::FlxG_obj::sound->music->_time,::hx::SourceInfo(HX_("source/NoteOffsetState.hx",a6,bb,96,52),28,HX_("NoteOffsetState",8c,82,4f,5a),HX_("update",09,86,05,87)));
            		}
HXLINE(  30)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  30)		if (_this3->keyManager->checkStatusUnsafe(13,_this3->status)) {
HXLINE(  31)			 ::flixel::FlxState nextState =  ::PlayState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(  31)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  31)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE(  33)		this->super::update(elapsed);
            	}



::hx::ObjectPtr< NoteOffsetState_obj > NoteOffsetState_obj::__new(::String music) {
	::hx::ObjectPtr< NoteOffsetState_obj > __this = new NoteOffsetState_obj();
	__this->__construct(music);
	return __this;
}

::hx::ObjectPtr< NoteOffsetState_obj > NoteOffsetState_obj::__alloc(::hx::Ctx *_hx_ctx,::String music) {
	NoteOffsetState_obj *__this = (NoteOffsetState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(NoteOffsetState_obj), true, "NoteOffsetState"));
	*(void **)__this = NoteOffsetState_obj::_hx_vtable;
	__this->__construct(music);
	return __this;
}

NoteOffsetState_obj::NoteOffsetState_obj()
{
}

void NoteOffsetState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NoteOffsetState);
	HX_MARK_MEMBER_NAME(music,"music");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void NoteOffsetState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(music,"music");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val NoteOffsetState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"music") ) { return ::hx::Val( music ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val NoteOffsetState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"music") ) { music=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void NoteOffsetState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("music",a5,d0,5a,10));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo NoteOffsetState_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(NoteOffsetState_obj,music),HX_("music",a5,d0,5a,10)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *NoteOffsetState_obj_sStaticStorageInfo = 0;
#endif

static ::String NoteOffsetState_obj_sMemberFields[] = {
	HX_("music",a5,d0,5a,10),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class NoteOffsetState_obj::__mClass;

void NoteOffsetState_obj::__register()
{
	NoteOffsetState_obj _hx_dummy;
	NoteOffsetState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("NoteOffsetState",8c,82,4f,5a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(NoteOffsetState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< NoteOffsetState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NoteOffsetState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NoteOffsetState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

