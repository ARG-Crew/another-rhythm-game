// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFrame
#include <flixel/graphics/frames/FlxFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxImageFrame
#include <flixel/graphics/frames/FlxImageFrame.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxTileFrames
#include <flixel/graphics/frames/FlxTileFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxDrawBaseItem
#include <flixel/graphics/tile/FlxDrawBaseItem.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxDrawQuadsItem
#include <flixel/graphics/tile/FlxDrawQuadsItem.h>
#endif
#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxCallbackPoint
#include <flixel/math/FlxCallbackPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMatrix
#include <flixel/math/FlxMatrix.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_BitmapFrontEnd
#include <flixel/system/frontEnds/BitmapFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_DebuggerFrontEnd
#include <flixel/system/frontEnds/DebuggerFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SignalFrontEnd
#include <flixel/system/frontEnds/SignalFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTile
#include <flixel/tile/FlxTile.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemap
#include <flixel/tile/FlxTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemapBuffer
#include <flixel/tile/FlxTilemapBuffer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxColorTransformUtil
#include <flixel/util/FlxColorTransformUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxDestroyUtil
#include <flixel/util/FlxDestroyUtil.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxBasePoint
#include <flixel/util/FlxPool_flixel_math_FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxRect
#include <flixel/util/FlxPool_flixel_math_FlxRect.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSpriteUtil
#include <flixel/util/FlxSpriteUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxSignal
#include <flixel/util/IFlxSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxBaseSignal
#include <flixel/util/_FlxSignal/FlxBaseSignal.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal0
#include <flixel/util/_FlxSignal/FlxSignal0.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal1
#include <flixel/util/_FlxSignal/FlxSignal1.h>
#endif
#ifndef INCLUDED_flixel_util__FlxSignal_FlxSignal2
#include <flixel/util/_FlxSignal/FlxSignal2.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_Graphics
#include <openfl/display/Graphics.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_geom_ColorTransform
#include <openfl/geom/ColorTransform.h>
#endif
#ifndef INCLUDED_openfl_geom_Matrix
#include <openfl/geom/Matrix.h>
#endif
#ifndef INCLUDED_openfl_geom_Point
#include <openfl/geom/Point.h>
#endif
#ifndef INCLUDED_openfl_geom_Rectangle
#include <openfl/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1146cbfc6764fb25_108_new,"flixel.tile.FlxTilemap","new",0xbe02531c,"flixel.tile.FlxTilemap.new","flixel/tile/FlxTilemap.hx",108,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_278_destroy,"flixel.tile.FlxTilemap","destroy",0xa7f2bdb6,"flixel.tile.FlxTilemap.destroy","flixel/tile/FlxTilemap.hx",278,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_325_set_frames,"flixel.tile.FlxTilemap","set_frames",0xb39c4aa7,"flixel.tile.FlxTilemap.set_frames","flixel/tile/FlxTilemap.hx",325,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_342_onGameResized,"flixel.tile.FlxTilemap","onGameResized",0x240fb4fb,"flixel.tile.FlxTilemap.onGameResized","flixel/tile/FlxTilemap.hx",342,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_347_onCameraChanged,"flixel.tile.FlxTilemap","onCameraChanged",0xe013f4ec,"flixel.tile.FlxTilemap.onCameraChanged","flixel/tile/FlxTilemap.hx",347,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_351_cacheGraphics,"flixel.tile.FlxTilemap","cacheGraphics",0x759126e9,"flixel.tile.FlxTilemap.cacheGraphics","flixel/tile/FlxTilemap.hx",351,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_400_padTileFrames,"flixel.tile.FlxTilemap","padTileFrames",0x456aa663,"flixel.tile.FlxTilemap.padTileFrames","flixel/tile/FlxTilemap.hx",400,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_409_initTileObjects,"flixel.tile.FlxTilemap","initTileObjects",0xb20b6ad2,"flixel.tile.FlxTilemap.initTileObjects","flixel/tile/FlxTilemap.hx",409,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_434_updateDebugTileBoundingBoxSolid,"flixel.tile.FlxTilemap","updateDebugTileBoundingBoxSolid",0xf2502658,"flixel.tile.FlxTilemap.updateDebugTileBoundingBoxSolid","flixel/tile/FlxTilemap.hx",434,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_439_updateDebugTileBoundingBoxNotSolid,"flixel.tile.FlxTilemap","updateDebugTileBoundingBoxNotSolid",0x299bee0b,"flixel.tile.FlxTilemap.updateDebugTileBoundingBoxNotSolid","flixel/tile/FlxTilemap.hx",439,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_444_updateDebugTileBoundingBoxPartial,"flixel.tile.FlxTilemap","updateDebugTileBoundingBoxPartial",0xa959eeee,"flixel.tile.FlxTilemap.updateDebugTileBoundingBoxPartial","flixel/tile/FlxTilemap.hx",444,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_448_updateDebugTile,"flixel.tile.FlxTilemap","updateDebugTile",0x0398ec94,"flixel.tile.FlxTilemap.updateDebugTile","flixel/tile/FlxTilemap.hx",448,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_472_computeDimensions,"flixel.tile.FlxTilemap","computeDimensions",0x3602f860,"flixel.tile.FlxTilemap.computeDimensions","flixel/tile/FlxTilemap.hx",472,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_481_updateMap,"flixel.tile.FlxTilemap","updateMap",0x271f1fcf,"flixel.tile.FlxTilemap.updateMap","flixel/tile/FlxTilemap.hx",481,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_494_drawDebugOnCamera,"flixel.tile.FlxTilemap","drawDebugOnCamera",0x0d929baf,"flixel.tile.FlxTilemap.drawDebugOnCamera","flixel/tile/FlxTilemap.hx",494,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_571_isOnScreen,"flixel.tile.FlxTilemap","isOnScreen",0xb4cad0b9,"flixel.tile.FlxTilemap.isOnScreen","flixel/tile/FlxTilemap.hx",571,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_586_draw,"flixel.tile.FlxTilemap","draw",0x7d740dc8,"flixel.tile.FlxTilemap.draw","flixel/tile/FlxTilemap.hx",586,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_639_refreshBuffers,"flixel.tile.FlxTilemap","refreshBuffers",0x89f6f19c,"flixel.tile.FlxTilemap.refreshBuffers","flixel/tile/FlxTilemap.hx",639,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_659_setDirty,"flixel.tile.FlxTilemap","setDirty",0x6396ccd4,"flixel.tile.FlxTilemap.setDirty","flixel/tile/FlxTilemap.hx",659,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_681_overlapsWithCallback,"flixel.tile.FlxTilemap","overlapsWithCallback",0xe7b56cdb,"flixel.tile.FlxTilemap.overlapsWithCallback","flixel/tile/FlxTilemap.hx",681,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_784_getTileIndexByCoords,"flixel.tile.FlxTilemap","getTileIndexByCoords",0xb5ce22c7,"flixel.tile.FlxTilemap.getTileIndexByCoords","flixel/tile/FlxTilemap.hx",784,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_796_getTileCoordsByIndex,"flixel.tile.FlxTilemap","getTileCoordsByIndex",0xe0680d7d,"flixel.tile.FlxTilemap.getTileCoordsByIndex","flixel/tile/FlxTilemap.hx",796,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_814_getTileCoords,"flixel.tile.FlxTilemap","getTileCoords",0x02899bde,"flixel.tile.FlxTilemap.getTileCoords","flixel/tile/FlxTilemap.hx",814,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_851_follow,"flixel.tile.FlxTilemap","follow",0xe6a96c35,"flixel.tile.FlxTilemap.follow","flixel/tile/FlxTilemap.hx",851,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_877_ray,"flixel.tile.FlxTilemap","ray",0xbe0558a6,"flixel.tile.FlxTilemap.ray","flixel/tile/FlxTilemap.hx",877,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_995_checkColumn,"flixel.tile.FlxTilemap","checkColumn",0x44e6c07a,"flixel.tile.FlxTilemap.checkColumn","flixel/tile/FlxTilemap.hx",995,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1040_rayStep,"flixel.tile.FlxTilemap","rayStep",0xb34ab712,"flixel.tile.FlxTilemap.rayStep","flixel/tile/FlxTilemap.hx",1040,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1149_tileToSprite,"flixel.tile.FlxTilemap","tileToSprite",0xe7482ef2,"flixel.tile.FlxTilemap.tileToSprite","flixel/tile/FlxTilemap.hx",1149,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1183_updateBuffers,"flixel.tile.FlxTilemap","updateBuffers",0xf5face26,"flixel.tile.FlxTilemap.updateBuffers","flixel/tile/FlxTilemap.hx",1183,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1196_drawTilemap,"flixel.tile.FlxTilemap","drawTilemap",0x2b20d346,"flixel.tile.FlxTilemap.drawTilemap","flixel/tile/FlxTilemap.hx",1196,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1338_makeDebugTile,"flixel.tile.FlxTilemap","makeDebugTile",0xa1ed2d0f,"flixel.tile.FlxTilemap.makeDebugTile","flixel/tile/FlxTilemap.hx",1338,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1349_drawDebugTile,"flixel.tile.FlxTilemap","drawDebugTile",0x086b4839,"flixel.tile.FlxTilemap.drawDebugTile","flixel/tile/FlxTilemap.hx",1349,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1366_onDrawDebugChanged,"flixel.tile.FlxTilemap","onDrawDebugChanged",0x3243d108,"flixel.tile.FlxTilemap.onDrawDebugChanged","flixel/tile/FlxTilemap.hx",1366,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1376_updateTile,"flixel.tile.FlxTilemap","updateTile",0x18c3429b,"flixel.tile.FlxTilemap.updateTile","flixel/tile/FlxTilemap.hx",1376,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1385_createBuffer,"flixel.tile.FlxTilemap","createBuffer",0x170b42e0,"flixel.tile.FlxTilemap.createBuffer","flixel/tile/FlxTilemap.hx",1385,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1393_set_antialiasing,"flixel.tile.FlxTilemap","set_antialiasing",0x6cc568b5,"flixel.tile.FlxTilemap.set_antialiasing","flixel/tile/FlxTilemap.hx",1393,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1404_set_graphic,"flixel.tile.FlxTilemap","set_graphic",0xa0b86087,"flixel.tile.FlxTilemap.set_graphic","flixel/tile/FlxTilemap.hx",1404,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1421_set_pixelPerfectRender,"flixel.tile.FlxTilemap","set_pixelPerfectRender",0x5122f25e,"flixel.tile.FlxTilemap.set_pixelPerfectRender","flixel/tile/FlxTilemap.hx",1421,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1430_set_alpha,"flixel.tile.FlxTilemap","set_alpha",0xecd0277d,"flixel.tile.FlxTilemap.set_alpha","flixel/tile/FlxTilemap.hx",1430,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1437_set_color,"flixel.tile.FlxTilemap","set_color",0x1595f182,"flixel.tile.FlxTilemap.set_color","flixel/tile/FlxTilemap.hx",1437,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1447_updateColorTransform,"flixel.tile.FlxTilemap","updateColorTransform",0x6f14b936,"flixel.tile.FlxTilemap.updateColorTransform","flixel/tile/FlxTilemap.hx",1447,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1460_set_blend,"flixel.tile.FlxTilemap","set_blend",0x802e6870,"flixel.tile.FlxTilemap.set_blend","flixel/tile/FlxTilemap.hx",1460,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1466_setScaleXYCallback,"flixel.tile.FlxTilemap","setScaleXYCallback",0x2287ee32,"flixel.tile.FlxTilemap.setScaleXYCallback","flixel/tile/FlxTilemap.hx",1466,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1472_setScaleXCallback,"flixel.tile.FlxTilemap","setScaleXCallback",0x45b95971,"flixel.tile.FlxTilemap.setScaleXCallback","flixel/tile/FlxTilemap.hx",1472,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1485_setScaleYCallback,"flixel.tile.FlxTilemap","setScaleYCallback",0x18aac272,"flixel.tile.FlxTilemap.setScaleYCallback","flixel/tile/FlxTilemap.hx",1485,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1504_defaultTileToSprite,"flixel.tile.FlxTilemap","defaultTileToSprite",0xb4e0664b,"flixel.tile.FlxTilemap.defaultTileToSprite","flixel/tile/FlxTilemap.hx",1504,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1515_set_allowCollisions,"flixel.tile.FlxTilemap","set_allowCollisions",0x96e24689,"flixel.tile.FlxTilemap.set_allowCollisions","flixel/tile/FlxTilemap.hx",1515,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1525_get_scaledWidth,"flixel.tile.FlxTilemap","get_scaledWidth",0x5556f15f,"flixel.tile.FlxTilemap.get_scaledWidth","flixel/tile/FlxTilemap.hx",1525,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1530_get_scaledHeight,"flixel.tile.FlxTilemap","get_scaledHeight",0x0d0bba6e,"flixel.tile.FlxTilemap.get_scaledHeight","flixel/tile/FlxTilemap.hx",1530,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1540_getBounds,"flixel.tile.FlxTilemap","getBounds",0x86b34767,"flixel.tile.FlxTilemap.getBounds","flixel/tile/FlxTilemap.hx",1540,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1549_set_debugBoundingBoxColorSolid,"flixel.tile.FlxTilemap","set_debugBoundingBoxColorSolid",0x6fe5cfdd,"flixel.tile.FlxTilemap.set_debugBoundingBoxColorSolid","flixel/tile/FlxTilemap.hx",1549,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1556_set_debugBoundingBoxColorNotSolid,"flixel.tile.FlxTilemap","set_debugBoundingBoxColorNotSolid",0xa41f45a6,"flixel.tile.FlxTilemap.set_debugBoundingBoxColorNotSolid","flixel/tile/FlxTilemap.hx",1556,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_1563_set_debugBoundingBoxColorPartial,"flixel.tile.FlxTilemap","set_debugBoundingBoxColorPartial",0xf6d0c3b3,"flixel.tile.FlxTilemap.set_debugBoundingBoxColorPartial","flixel/tile/FlxTilemap.hx",1563,0x448feb74)
HX_LOCAL_STACK_FRAME(_hx_pos_1146cbfc6764fb25_114_boot,"flixel.tile.FlxTilemap","boot",0x7c1f65f6,"flixel.tile.FlxTilemap.boot","flixel/tile/FlxTilemap.hx",114,0x448feb74)
namespace flixel{
namespace tile{

void FlxTilemap_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_1146cbfc6764fb25_108_new)
HXLINE( 244)		this->_checkBufferChanges = false;
HXLINE( 222)		this->_buffers = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 217)		this->_flashRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE( 212)		this->_flashPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 187)		this->scaledTileHeight = ((Float)0);
HXLINE( 182)		this->scaledTileWidth = ((Float)0);
HXLINE( 177)		this->tileHeight = 0;
HXLINE( 172)		this->tileWidth = 0;
HXLINE( 167)		this->blend = null();
HXLINE( 162)		this->colorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 160)		this->alpha = ((Float)1.0);
HXLINE( 155)		this->color = 16777215;
HXLINE( 142)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 142)		point->_inPool = false;
HXDLIN( 142)		this->offset = point;
HXLINE( 136)		this->antialiasing = ::flixel::FlxSprite_obj::defaultAntialiasing;
HXLINE( 122)		this->useScaleHack = false;
HXLINE( 248)		super::__construct();
HXLINE( 250)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 252)			this->_helperPoint =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 253)			this->_matrix =  ::flixel::math::FlxMatrix_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null());
            		}
HXLINE( 256)		this->scale =  ::flixel::math::FlxCallbackPoint_obj::__alloc( HX_CTX ,this->setScaleXCallback_dyn(),this->setScaleYCallback_dyn(),this->setScaleXYCallback_dyn());
HXLINE( 257)		{
HXLINE( 257)			 ::flixel::math::FlxBasePoint this1 = this->scale;
HXDLIN( 257)			this1->set_x(( (Float)(1) ));
HXDLIN( 257)			this1->set_y(( (Float)(1) ));
            		}
HXLINE( 259)		::flixel::FlxG_obj::signals->gameResized->add(this->onGameResized_dyn());
HXLINE( 260)		::flixel::FlxG_obj::cameras->cameraAdded->add(this->onCameraChanged_dyn());
HXLINE( 261)		::flixel::FlxG_obj::cameras->cameraRemoved->add(this->onCameraChanged_dyn());
HXLINE( 262)		::flixel::FlxG_obj::cameras->cameraResized->add(this->onCameraChanged_dyn());
HXLINE( 265)		this->set_debugBoundingBoxColorSolid(-16744448);
HXLINE( 266)		this->set_debugBoundingBoxColorPartial(-16181);
HXLINE( 267)		this->set_debugBoundingBoxColorNotSolid(0);
HXLINE( 269)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 270)			::flixel::FlxG_obj::debugger->drawDebugChanged->add(this->onDrawDebugChanged_dyn());
            		}
            	}

Dynamic FlxTilemap_obj::__CreateEmpty() { return new FlxTilemap_obj; }

void *FlxTilemap_obj::_hx_vtable = 0;

Dynamic FlxTilemap_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FlxTilemap_obj > _hx_result = new FlxTilemap_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxTilemap_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3d6253b5) {
		if (inClassId<=(int)0x1dc5d3c6) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1dc5d3c6;
		} else {
			return inClassId==(int)0x3d6253b5;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void FlxTilemap_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_278_destroy)
HXLINE( 279)		this->_flashPoint = null();
HXLINE( 280)		this->_flashRect = null();
HXLINE( 282)		this->_tileObjects = ::flixel::util::FlxDestroyUtil_obj::destroyArray(this->_tileObjects);
HXLINE( 283)		this->_buffers = ::flixel::util::FlxDestroyUtil_obj::destroyArray(this->_buffers);
HXLINE( 285)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 288)			this->_debugRect = null();
HXLINE( 289)			this->_debugTileNotSolid = ::flixel::util::FlxDestroyUtil_obj::dispose(this->_debugTileNotSolid);
HXLINE( 290)			this->_debugTilePartial = ::flixel::util::FlxDestroyUtil_obj::dispose(this->_debugTilePartial);
HXLINE( 291)			this->_debugTileSolid = ::flixel::util::FlxDestroyUtil_obj::dispose(this->_debugTileSolid);
            		}
            		else {
HXLINE( 296)			this->_helperPoint = null();
HXLINE( 297)			this->_matrix = null();
            		}
HXLINE( 300)		this->set_frames(null());
HXLINE( 301)		this->set_graphic(null());
HXLINE( 304)		this->scale = ( ( ::flixel::math::FlxBasePoint)(::flixel::util::FlxDestroyUtil_obj::destroy(this->scale)) );
HXLINE( 305)		this->offset = ( ( ::flixel::math::FlxBasePoint)(::flixel::util::FlxDestroyUtil_obj::put(this->offset)) );
HXLINE( 307)		this->colorTransform = null();
HXLINE( 309)		::flixel::FlxG_obj::signals->gameResized->remove(this->onGameResized_dyn());
HXLINE( 310)		::flixel::FlxG_obj::cameras->cameraAdded->remove(this->onCameraChanged_dyn());
HXLINE( 311)		::flixel::FlxG_obj::cameras->cameraRemoved->remove(this->onCameraChanged_dyn());
HXLINE( 312)		::flixel::FlxG_obj::cameras->cameraResized->remove(this->onCameraChanged_dyn());
HXLINE( 315)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 316)			::flixel::FlxG_obj::debugger->drawDebugChanged->remove(this->onDrawDebugChanged_dyn());
            		}
HXLINE( 319)		this->shader = null();
HXLINE( 321)		this->super::destroy();
            	}


 ::flixel::graphics::frames::FlxFramesCollection FlxTilemap_obj::set_frames( ::flixel::graphics::frames::FlxFramesCollection value){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_325_set_frames)
HXLINE( 326)		this->frames = value;
HXLINE( 328)		if (::hx::IsNotNull( value )) {
HXLINE( 330)			this->tileWidth = ::Std_obj::_hx_int(value->frames->__get(0).StaticCast<  ::flixel::graphics::frames::FlxFrame >()->sourceSize->x);
HXLINE( 331)			this->tileHeight = ::Std_obj::_hx_int(value->frames->__get(0).StaticCast<  ::flixel::graphics::frames::FlxFrame >()->sourceSize->y);
HXLINE( 332)			this->_flashRect->setTo(( (Float)(0) ),( (Float)(0) ),( (Float)(this->tileWidth) ),( (Float)(this->tileHeight) ));
HXLINE( 333)			this->set_graphic(value->parent);
HXLINE( 334)			this->postGraphicLoad();
            		}
HXLINE( 337)		return value;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,set_frames,return )

void FlxTilemap_obj::onGameResized(int _,int _1){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_342_onGameResized)
HXDLIN( 342)		this->_checkBufferChanges = true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTilemap_obj,onGameResized,(void))

void FlxTilemap_obj::onCameraChanged( ::flixel::FlxCamera _){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_347_onCameraChanged)
HXDLIN( 347)		this->_checkBufferChanges = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,onCameraChanged,(void))

void FlxTilemap_obj::cacheGraphics(int tileWidth,int tileHeight, ::Dynamic tileGraphic){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_351_cacheGraphics)
HXLINE( 352)		if (::Std_obj::isOfType(tileGraphic,::hx::ClassOf< ::flixel::graphics::frames::FlxFramesCollection >())) {
HXLINE( 354)			this->set_frames(( ( ::flixel::graphics::frames::FlxFramesCollection)(tileGraphic) ));
HXLINE( 355)			return;
            		}
HXLINE( 358)		 ::flixel::graphics::FlxGraphic graph = ::flixel::FlxG_obj::bitmap->add(tileGraphic,null(),null());
HXLINE( 359)		if (::hx::IsNull( graph )) {
HXLINE( 360)			return;
            		}
HXLINE( 363)		if ((tileWidth <= 0)) {
HXLINE( 364)			tileWidth = graph->height;
            		}
HXLINE( 366)		if ((tileHeight <= 0)) {
HXLINE( 367)			tileHeight = tileWidth;
            		}
HXLINE( 369)		this->tileWidth = tileWidth;
HXLINE( 370)		this->tileHeight = tileHeight;
HXLINE( 372)		bool _hx_tmp;
HXDLIN( 372)		if ((::flixel::tile::FlxTilemap_obj::defaultFramePadding > 0)) {
HXLINE( 372)			if (::hx::IsNotNull( graph->bitmap )) {
HXLINE( 372)				_hx_tmp = !(graph->bitmap->rect->isEmpty());
            			}
            			else {
HXLINE( 372)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 372)			_hx_tmp = false;
            		}
HXDLIN( 372)		if (_hx_tmp) {
HXLINE( 373)			this->set_frames(this->padTileFrames(tileWidth,tileHeight,graph,::flixel::tile::FlxTilemap_obj::defaultFramePadding));
            		}
            		else {
HXLINE( 394)			 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get()->set(tileWidth,tileHeight);
HXDLIN( 394)			point->_inPool = false;
HXDLIN( 394)			this->set_frames(::flixel::graphics::frames::FlxTileFrames_obj::fromGraphic(graph,point,null(),null()));
            		}
            	}


 ::flixel::graphics::frames::FlxTileFrames FlxTilemap_obj::padTileFrames(int tileWidth,int tileHeight, ::flixel::graphics::FlxGraphic graphic,int padding){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_400_padTileFrames)
HXLINE( 402)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get()->set(tileWidth,tileHeight);
HXDLIN( 402)		point->_inPool = false;
HXLINE( 404)		 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get()->set(padding,padding);
HXDLIN( 404)		point1->_inPool = false;
HXLINE( 400)		return ::flixel::graphics::frames::FlxTileFrames_obj::fromBitmapAddSpacesAndBorders(graphic,point,null(),point1,null());
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxTilemap_obj,padTileFrames,return )

void FlxTilemap_obj::initTileObjects(){
            	HX_GC_STACKFRAME(&_hx_pos_1146cbfc6764fb25_409_initTileObjects)
HXLINE( 410)		if (::hx::IsNull( this->frames )) {
HXLINE( 411)			return;
            		}
HXLINE( 413)		this->_tileObjects = ::flixel::util::FlxDestroyUtil_obj::destroyArray(this->_tileObjects);
HXLINE( 415)		this->_tileObjects = ::Array_obj< ::Dynamic>::__new();
HXLINE( 417)		int length = this->frames->frames->length;
HXLINE( 418)		length = (length + this->_startingIndex);
HXLINE( 420)		{
HXLINE( 420)			int _g = 0;
HXDLIN( 420)			int _g1 = length;
HXDLIN( 420)			while((_g < _g1)){
HXLINE( 420)				_g = (_g + 1);
HXDLIN( 420)				int i = (_g - 1);
HXLINE( 421)				int _hx_tmp;
HXDLIN( 421)				if ((i >= this->_collideIndex)) {
HXLINE( 421)					_hx_tmp = this->allowCollisions;
            				}
            				else {
HXLINE( 421)					_hx_tmp = 0;
            				}
HXDLIN( 421)				this->_tileObjects->set(i, ::flixel::tile::FlxTile_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this),i,( (Float)(this->tileWidth) ),( (Float)(this->tileHeight) ),(i >= this->_drawIndex),_hx_tmp));
            			}
            		}
HXLINE( 425)		this->updateDebugTileBoundingBoxSolid();
HXLINE( 426)		this->updateDebugTileBoundingBoxNotSolid();
HXLINE( 427)		this->updateDebugTileBoundingBoxPartial();
            	}


void FlxTilemap_obj::updateDebugTileBoundingBoxSolid(){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_434_updateDebugTileBoundingBoxSolid)
HXDLIN( 434)		this->_debugTileSolid = this->updateDebugTile(this->_debugTileSolid,this->debugBoundingBoxColorSolid);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTilemap_obj,updateDebugTileBoundingBoxSolid,(void))

void FlxTilemap_obj::updateDebugTileBoundingBoxNotSolid(){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_439_updateDebugTileBoundingBoxNotSolid)
HXDLIN( 439)		this->_debugTileNotSolid = this->updateDebugTile(this->_debugTileNotSolid,this->debugBoundingBoxColorNotSolid);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTilemap_obj,updateDebugTileBoundingBoxNotSolid,(void))

void FlxTilemap_obj::updateDebugTileBoundingBoxPartial(){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_444_updateDebugTileBoundingBoxPartial)
HXDLIN( 444)		this->_debugTilePartial = this->updateDebugTile(this->_debugTilePartial,this->debugBoundingBoxColorPartial);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTilemap_obj,updateDebugTileBoundingBoxPartial,(void))

 ::openfl::display::BitmapData FlxTilemap_obj::updateDebugTile( ::openfl::display::BitmapData tileBitmap,int color){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_448_updateDebugTile)
HXLINE( 449)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 450)			return null();
            		}
HXLINE( 452)		bool _hx_tmp;
HXDLIN( 452)		if ((this->tileWidth > 0)) {
HXLINE( 452)			_hx_tmp = (this->tileHeight <= 0);
            		}
            		else {
HXLINE( 452)			_hx_tmp = true;
            		}
HXDLIN( 452)		if (_hx_tmp) {
HXLINE( 453)			return tileBitmap;
            		}
HXLINE( 455)		bool _hx_tmp1;
HXDLIN( 455)		if (::hx::IsNotNull( tileBitmap )) {
HXLINE( 455)			if ((tileBitmap->width == this->tileWidth)) {
HXLINE( 455)				_hx_tmp1 = (tileBitmap->height != this->tileHeight);
            			}
            			else {
HXLINE( 455)				_hx_tmp1 = true;
            			}
            		}
            		else {
HXLINE( 455)			_hx_tmp1 = false;
            		}
HXDLIN( 455)		if (_hx_tmp1) {
HXLINE( 456)			tileBitmap = ::flixel::util::FlxDestroyUtil_obj::dispose(tileBitmap);
            		}
HXLINE( 458)		if (::hx::IsNull( tileBitmap )) {
HXLINE( 459)			tileBitmap = this->makeDebugTile(color);
            		}
            		else {
HXLINE( 462)			tileBitmap->fillRect(tileBitmap->rect,0);
HXLINE( 463)			this->drawDebugTile(tileBitmap,color);
            		}
HXLINE( 466)		this->setDirty(null());
HXLINE( 467)		return tileBitmap;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTilemap_obj,updateDebugTile,return )

void FlxTilemap_obj::computeDimensions(){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_472_computeDimensions)
HXLINE( 473)		this->scaledTileWidth = (( (Float)(this->tileWidth) ) * this->scale->x);
HXLINE( 474)		this->scaledTileHeight = (( (Float)(this->tileHeight) ) * this->scale->y);
HXLINE( 476)		this->set_width((( (Float)(this->widthInTiles) ) * this->scaledTileWidth));
HXLINE( 477)		this->set_height((( (Float)(this->heightInTiles) ) * this->scaledTileHeight));
            	}


void FlxTilemap_obj::updateMap(){
            	HX_GC_STACKFRAME(&_hx_pos_1146cbfc6764fb25_481_updateMap)
HXLINE( 483)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 484)			this->_debugRect =  ::openfl::geom::Rectangle_obj::__alloc( HX_CTX ,0,0,this->tileWidth,this->tileHeight);
            		}
HXLINE( 487)		int numTiles = this->_tileObjects->get_length();
HXLINE( 488)		{
HXLINE( 488)			int _g = 0;
HXDLIN( 488)			int _g1 = numTiles;
HXDLIN( 488)			while((_g < _g1)){
HXLINE( 488)				_g = (_g + 1);
HXDLIN( 488)				int i = (_g - 1);
HXLINE( 489)				this->updateTile(i);
            			}
            		}
            	}


void FlxTilemap_obj::drawDebugOnCamera( ::flixel::FlxCamera camera){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_494_drawDebugOnCamera)
HXLINE( 495)		if (!(::flixel::FlxG_obj::renderTile)) {
HXLINE( 496)			return;
            		}
HXLINE( 498)		 ::flixel::tile::FlxTilemapBuffer buffer = null();
HXLINE( 499)		int l = ::flixel::FlxG_obj::cameras->list->length;
HXLINE( 501)		{
HXLINE( 501)			int _g = 0;
HXDLIN( 501)			int _g1 = l;
HXDLIN( 501)			while((_g < _g1)){
HXLINE( 501)				_g = (_g + 1);
HXDLIN( 501)				int i = (_g - 1);
HXLINE( 503)				if (::hx::IsInstanceEq( ::flixel::FlxG_obj::cameras->list->__get(i).StaticCast<  ::flixel::FlxCamera >(),camera )) {
HXLINE( 505)					buffer = this->_buffers->__get(i).StaticCast<  ::flixel::tile::FlxTilemapBuffer >();
HXLINE( 506)					goto _hx_goto_16;
            				}
            			}
            			_hx_goto_16:;
            		}
HXLINE( 510)		if (::hx::IsNull( buffer )) {
HXLINE( 511)			return;
            		}
HXLINE( 514)		this->_helperPoint->x = (this->x - (camera->scroll->x * this->scrollFactor->x));
HXLINE( 515)		this->_helperPoint->y = (this->y - (camera->scroll->y * this->scrollFactor->y));
HXLINE( 517)		Float rectWidth = this->scaledTileWidth;
HXLINE( 518)		Float rectHeight = this->scaledTileHeight;
HXLINE( 519)		 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN( 519)		_this->x = ( (Float)(0) );
HXDLIN( 519)		_this->y = ( (Float)(0) );
HXDLIN( 519)		_this->width = rectWidth;
HXDLIN( 519)		_this->height = rectHeight;
HXDLIN( 519)		 ::flixel::math::FlxRect rect = _this;
HXDLIN( 519)		rect->_inPool = false;
HXDLIN( 519)		 ::flixel::math::FlxRect rect1 = rect;
HXLINE( 523)		this->_point->set_x(((camera->scroll->x * this->scrollFactor->x) - this->x));
HXLINE( 524)		this->_point->set_y(((camera->scroll->y * this->scrollFactor->y) - this->y));
HXLINE( 525)		int screenXInTiles = ::Math_obj::floor((this->_point->x / this->scaledTileWidth));
HXLINE( 526)		int screenYInTiles = ::Math_obj::floor((this->_point->y / this->scaledTileHeight));
HXLINE( 527)		int screenRows = buffer->rows;
HXLINE( 528)		int screenColumns = buffer->columns;
HXLINE( 531)		 ::Dynamic Max = (this->widthInTiles - screenColumns);
HXDLIN( 531)		Float lowerBound;
HXDLIN( 531)		if ((screenXInTiles < 0)) {
HXLINE( 531)			lowerBound = ( (Float)(0) );
            		}
            		else {
HXLINE( 531)			lowerBound = ( (Float)(screenXInTiles) );
            		}
HXDLIN( 531)		Float screenXInTiles1;
HXDLIN( 531)		bool screenXInTiles2;
HXDLIN( 531)		if (::hx::IsNotNull( Max )) {
HXLINE( 531)			screenXInTiles2 = ::hx::IsGreater( lowerBound,Max );
            		}
            		else {
HXLINE( 531)			screenXInTiles2 = false;
            		}
HXDLIN( 531)		if (screenXInTiles2) {
HXLINE( 531)			screenXInTiles1 = ( (Float)(Max) );
            		}
            		else {
HXLINE( 531)			screenXInTiles1 = lowerBound;
            		}
HXDLIN( 531)		screenXInTiles = ::Std_obj::_hx_int(screenXInTiles1);
HXLINE( 532)		 ::Dynamic Max1 = (this->heightInTiles - screenRows);
HXDLIN( 532)		Float lowerBound1;
HXDLIN( 532)		if ((screenYInTiles < 0)) {
HXLINE( 532)			lowerBound1 = ( (Float)(0) );
            		}
            		else {
HXLINE( 532)			lowerBound1 = ( (Float)(screenYInTiles) );
            		}
HXDLIN( 532)		Float screenYInTiles1;
HXDLIN( 532)		bool screenYInTiles2;
HXDLIN( 532)		if (::hx::IsNotNull( Max1 )) {
HXLINE( 532)			screenYInTiles2 = ::hx::IsGreater( lowerBound1,Max1 );
            		}
            		else {
HXLINE( 532)			screenYInTiles2 = false;
            		}
HXDLIN( 532)		if (screenYInTiles2) {
HXLINE( 532)			screenYInTiles1 = ( (Float)(Max1) );
            		}
            		else {
HXLINE( 532)			screenYInTiles1 = lowerBound1;
            		}
HXDLIN( 532)		screenYInTiles = ::Std_obj::_hx_int(screenYInTiles1);
HXLINE( 534)		int rowIndex = ((screenYInTiles * this->widthInTiles) + screenXInTiles);
HXLINE( 535)		int columnIndex;
HXLINE( 536)		 ::flixel::tile::FlxTile tile;
HXLINE( 538)		{
HXLINE( 538)			int _g2 = 0;
HXDLIN( 538)			int _g3 = screenRows;
HXDLIN( 538)			while((_g2 < _g3)){
HXLINE( 538)				_g2 = (_g2 + 1);
HXDLIN( 538)				int row = (_g2 - 1);
HXLINE( 540)				columnIndex = rowIndex;
HXLINE( 542)				{
HXLINE( 542)					int _g4 = 0;
HXDLIN( 542)					int _g5 = screenColumns;
HXDLIN( 542)					while((_g4 < _g5)){
HXLINE( 542)						_g4 = (_g4 + 1);
HXDLIN( 542)						int column = (_g4 - 1);
HXLINE( 544)						tile = Dynamic( this->_tileObjects->__get(this->_data->__get(columnIndex))).StaticCast<  ::flixel::tile::FlxTile >();
HXLINE( 546)						bool _hx_tmp;
HXDLIN( 546)						if (::hx::IsNotNull( tile )) {
HXLINE( 546)							_hx_tmp = tile->visible;
            						}
            						else {
HXLINE( 546)							_hx_tmp = false;
            						}
HXDLIN( 546)						if (_hx_tmp) {
HXLINE( 548)							rect1->x = (this->_helperPoint->x + (( (Float)(::hx::Mod(columnIndex,this->widthInTiles)) ) * rectWidth));
HXLINE( 549)							rect1->y = (this->_helperPoint->y + (( (Float)(::Math_obj::floor((( (Float)(columnIndex) ) / ( (Float)(this->widthInTiles) )))) ) * rectHeight));
HXLINE( 550)							 ::openfl::display::Graphics _hx_tmp1 = camera->debugLayer->get_graphics();
HXDLIN( 550)							this->drawDebugBoundingBox(_hx_tmp1,rect1,tile->allowCollisions,(tile->allowCollisions != 4369));
            						}
HXLINE( 553)						columnIndex = (columnIndex + 1);
            					}
            				}
HXLINE( 556)				rowIndex = (rowIndex + this->widthInTiles);
            			}
            		}
HXLINE( 559)		if (!(rect1->_inPool)) {
HXLINE( 559)			rect1->_inPool = true;
HXDLIN( 559)			rect1->_weak = false;
HXDLIN( 559)			::flixel::math::FlxRect_obj::_pool->putUnsafe(rect1);
            		}
            	}


bool FlxTilemap_obj::isOnScreen( ::flixel::FlxCamera camera){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_571_isOnScreen)
HXLINE( 572)		if (::hx::IsNull( camera )) {
HXLINE( 573)			camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE( 575)		Float minX = ((this->x - this->offset->x) - (camera->scroll->x * this->scrollFactor->x));
HXLINE( 576)		Float minY = ((this->y - this->offset->y) - (camera->scroll->y * this->scrollFactor->y));
HXLINE( 578)		{
HXLINE( 578)			 ::flixel::math::FlxBasePoint this1 = this->_point;
HXDLIN( 578)			this1->set_x(minX);
HXDLIN( 578)			this1->set_y(minY);
            		}
HXLINE( 579)		 ::flixel::math::FlxBasePoint point = this->_point;
HXDLIN( 579)		bool contained;
HXDLIN( 579)		bool contained1;
HXDLIN( 579)		bool contained2;
HXDLIN( 579)		if (((point->x + (this->scaledTileWidth * ( (Float)(this->widthInTiles) ))) > camera->viewMarginX)) {
HXLINE( 579)			contained2 = (point->x < (( (Float)(camera->width) ) - camera->viewMarginX));
            		}
            		else {
HXLINE( 579)			contained2 = false;
            		}
HXDLIN( 579)		if (contained2) {
HXLINE( 579)			contained1 = ((point->y + (this->scaledTileHeight * ( (Float)(this->heightInTiles) ))) > camera->viewMarginY);
            		}
            		else {
HXLINE( 579)			contained1 = false;
            		}
HXDLIN( 579)		if (contained1) {
HXLINE( 579)			contained = (point->y < (( (Float)(camera->height) ) - camera->viewMarginY));
            		}
            		else {
HXLINE( 579)			contained = false;
            		}
HXDLIN( 579)		if (point->_weak) {
HXLINE( 579)			point->put();
            		}
HXDLIN( 579)		return contained;
            	}


void FlxTilemap_obj::draw(){
            	HX_GC_STACKFRAME(&_hx_pos_1146cbfc6764fb25_586_draw)
HXLINE( 588)		if (::hx::IsNull( this->graphic )) {
HXLINE( 589)			return;
            		}
HXLINE( 591)		if (this->_checkBufferChanges) {
HXLINE( 593)			this->refreshBuffers();
HXLINE( 594)			this->_checkBufferChanges = false;
            		}
HXLINE( 597)		 ::flixel::FlxCamera camera;
HXLINE( 598)		 ::flixel::tile::FlxTilemapBuffer buffer;
HXLINE( 599)		int l = this->get_cameras()->length;
HXLINE( 601)		{
HXLINE( 601)			int _g = 0;
HXDLIN( 601)			int _g1 = l;
HXDLIN( 601)			while((_g < _g1)){
HXLINE( 601)				_g = (_g + 1);
HXDLIN( 601)				int i = (_g - 1);
HXLINE( 603)				camera = this->get_cameras()->__get(i).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 605)				bool _hx_tmp;
HXDLIN( 605)				bool _hx_tmp1;
HXDLIN( 605)				if (camera->visible) {
HXLINE( 605)					_hx_tmp1 = !(camera->exists);
            				}
            				else {
HXLINE( 605)					_hx_tmp1 = true;
            				}
HXDLIN( 605)				if (!(_hx_tmp1)) {
HXLINE( 605)					_hx_tmp = !(this->isOnScreen(camera));
            				}
            				else {
HXLINE( 605)					_hx_tmp = true;
            				}
HXDLIN( 605)				if (_hx_tmp) {
HXLINE( 606)					continue;
            				}
HXLINE( 608)				if (::hx::IsNull( this->_buffers->__get(i).StaticCast<  ::flixel::tile::FlxTilemapBuffer >() )) {
HXLINE( 609)					::Array< ::Dynamic> _hx_tmp2 = this->_buffers;
HXDLIN( 609)					 ::flixel::tile::FlxTilemapBuffer buffer1 =  ::flixel::tile::FlxTilemapBuffer_obj::__alloc( HX_CTX ,this->tileWidth,this->tileHeight,this->widthInTiles,this->heightInTiles,camera,this->scale->x,this->scale->y);
HXDLIN( 609)					buffer1->pixelPerfectRender = this->pixelPerfectRender;
HXDLIN( 609)					buffer1->antialiasing = this->antialiasing;
HXDLIN( 609)					_hx_tmp2[i] = buffer1;
            				}
HXLINE( 611)				buffer = this->_buffers->__get(i).StaticCast<  ::flixel::tile::FlxTilemapBuffer >();
HXLINE( 613)				if (::flixel::FlxG_obj::renderBlit) {
HXLINE( 615)					if (buffer->isDirty(::hx::ObjectPtr<OBJ_>(this),camera)) {
HXLINE( 616)						this->drawTilemap(buffer,camera);
            					}
HXLINE( 618)					{
HXLINE( 618)						 ::flixel::math::FlxBasePoint this1 = this->getScreenPosition(this->_point,camera);
HXDLIN( 618)						 ::flixel::math::FlxBasePoint point = this->offset;
HXDLIN( 618)						{
HXLINE( 618)							Float y = point->y;
HXDLIN( 618)							this1->set_x((this1->x - point->x));
HXDLIN( 618)							this1->set_y((this1->y - y));
            						}
HXDLIN( 618)						if (point->_weak) {
HXLINE( 618)							point->put();
            						}
HXDLIN( 618)						 ::flixel::math::FlxBasePoint this2 = this1;
HXDLIN( 618)						Float y1 = buffer->y;
HXDLIN( 618)						this2->set_x((this2->x + buffer->x));
HXDLIN( 618)						this2->set_y((this2->y + y1));
HXDLIN( 618)						 ::flixel::math::FlxBasePoint this3 = this2;
HXDLIN( 618)						 ::openfl::geom::Point p = this->_flashPoint;
HXDLIN( 618)						if (::hx::IsNull( p )) {
HXLINE( 618)							p =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            						}
HXDLIN( 618)						p->x = this3->x;
HXDLIN( 618)						p->y = this3->y;
            					}
HXLINE( 619)					buffer->draw(camera,this->_flashPoint,this->scale->x,this->scale->y);
            				}
            				else {
HXLINE( 623)					this->drawTilemap(buffer,camera);
            				}
HXLINE( 627)				::flixel::FlxBasic_obj::visibleCount++;
            			}
            		}
HXLINE( 632)		if (::flixel::FlxG_obj::debugger->drawDebug) {
HXLINE( 633)			this->drawDebug();
            		}
            	}


void FlxTilemap_obj::refreshBuffers(){
            	HX_GC_STACKFRAME(&_hx_pos_1146cbfc6764fb25_639_refreshBuffers)
HXDLIN( 639)		int _g = 0;
HXDLIN( 639)		int _g1 = this->get_cameras()->length;
HXDLIN( 639)		while((_g < _g1)){
HXDLIN( 639)			_g = (_g + 1);
HXDLIN( 639)			int i = (_g - 1);
HXLINE( 641)			 ::flixel::FlxCamera camera = this->get_cameras()->__get(i).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 642)			 ::flixel::tile::FlxTilemapBuffer buffer = this->_buffers->__get(i).StaticCast<  ::flixel::tile::FlxTilemapBuffer >();
HXLINE( 645)			if (::hx::IsNull( buffer )) {
HXLINE( 646)				::Array< ::Dynamic> _hx_tmp = this->_buffers;
HXDLIN( 646)				 ::flixel::tile::FlxTilemapBuffer buffer1 =  ::flixel::tile::FlxTilemapBuffer_obj::__alloc( HX_CTX ,this->tileWidth,this->tileHeight,this->widthInTiles,this->heightInTiles,camera,this->scale->x,this->scale->y);
HXDLIN( 646)				buffer1->pixelPerfectRender = this->pixelPerfectRender;
HXDLIN( 646)				buffer1->antialiasing = this->antialiasing;
HXDLIN( 646)				_hx_tmp[i] = buffer1;
            			}
            			else {
HXLINE( 648)				buffer->resize(this->tileWidth,this->tileHeight,this->widthInTiles,this->heightInTiles,camera,this->scale->x,this->scale->y);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTilemap_obj,refreshBuffers,(void))

void FlxTilemap_obj::setDirty(::hx::Null< bool >  __o_dirty){
            		bool dirty = __o_dirty.Default(true);
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_659_setDirty)
HXLINE( 660)		if (::flixel::FlxG_obj::renderTile) {
HXLINE( 661)			return;
            		}
HXLINE( 663)		{
HXLINE( 663)			int _g = 0;
HXDLIN( 663)			::Array< ::Dynamic> _g1 = this->_buffers;
HXDLIN( 663)			while((_g < _g1->length)){
HXLINE( 663)				 ::flixel::tile::FlxTilemapBuffer buffer = _g1->__get(_g).StaticCast<  ::flixel::tile::FlxTilemapBuffer >();
HXDLIN( 663)				_g = (_g + 1);
HXLINE( 664)				if (::hx::IsNotNull( buffer )) {
HXLINE( 665)					buffer->dirty = dirty;
            				}
            			}
            		}
            	}


bool FlxTilemap_obj::overlapsWithCallback( ::flixel::FlxObject object, ::Dynamic callback,::hx::Null< bool >  __o_flipCallbackParams, ::flixel::math::FlxBasePoint position){
            		bool flipCallbackParams = __o_flipCallbackParams.Default(false);
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_681_overlapsWithCallback)
HXLINE( 682)		bool results = false;
HXLINE( 684)		Float xPos = this->x;
HXLINE( 685)		Float yPos = this->y;
HXLINE( 687)		if (::hx::IsNotNull( position )) {
HXLINE( 689)			xPos = position->x;
HXLINE( 690)			yPos = position->y;
HXLINE( 691)			if (position->_weak) {
HXLINE( 691)				position->put();
            			}
            		}
HXLINE( 695)		int selectionX = ::Math_obj::floor(((object->x - xPos) / this->scaledTileWidth));
HXLINE( 696)		int selectionY = ::Math_obj::floor(((object->y - yPos) / this->scaledTileHeight));
HXLINE( 697)		Float selectionWidth = object->get_width();
HXDLIN( 697)		int selectionWidth1 = ((selectionX + ::Math_obj::ceil((selectionWidth / this->scaledTileWidth))) + 1);
HXLINE( 698)		Float selectionHeight = object->get_height();
HXDLIN( 698)		int selectionHeight1 = ((selectionY + ::Math_obj::ceil((selectionHeight / this->scaledTileHeight))) + 1);
HXLINE( 701)		 ::Dynamic Max = this->widthInTiles;
HXDLIN( 701)		Float lowerBound;
HXDLIN( 701)		if ((selectionX < 0)) {
HXLINE( 701)			lowerBound = ( (Float)(0) );
            		}
            		else {
HXLINE( 701)			lowerBound = ( (Float)(selectionX) );
            		}
HXDLIN( 701)		Float selectionX1;
HXDLIN( 701)		bool selectionX2;
HXDLIN( 701)		if (::hx::IsNotNull( Max )) {
HXLINE( 701)			selectionX2 = ::hx::IsGreater( lowerBound,Max );
            		}
            		else {
HXLINE( 701)			selectionX2 = false;
            		}
HXDLIN( 701)		if (selectionX2) {
HXLINE( 701)			selectionX1 = ( (Float)(Max) );
            		}
            		else {
HXLINE( 701)			selectionX1 = lowerBound;
            		}
HXDLIN( 701)		selectionX = ::Std_obj::_hx_int(selectionX1);
HXLINE( 702)		 ::Dynamic Max1 = this->heightInTiles;
HXDLIN( 702)		Float lowerBound1;
HXDLIN( 702)		if ((selectionY < 0)) {
HXLINE( 702)			lowerBound1 = ( (Float)(0) );
            		}
            		else {
HXLINE( 702)			lowerBound1 = ( (Float)(selectionY) );
            		}
HXDLIN( 702)		Float selectionY1;
HXDLIN( 702)		bool selectionY2;
HXDLIN( 702)		if (::hx::IsNotNull( Max1 )) {
HXLINE( 702)			selectionY2 = ::hx::IsGreater( lowerBound1,Max1 );
            		}
            		else {
HXLINE( 702)			selectionY2 = false;
            		}
HXDLIN( 702)		if (selectionY2) {
HXLINE( 702)			selectionY1 = ( (Float)(Max1) );
            		}
            		else {
HXLINE( 702)			selectionY1 = lowerBound1;
            		}
HXDLIN( 702)		selectionY = ::Std_obj::_hx_int(selectionY1);
HXLINE( 703)		 ::Dynamic Max2 = this->widthInTiles;
HXDLIN( 703)		Float lowerBound2;
HXDLIN( 703)		if ((selectionWidth1 < 0)) {
HXLINE( 703)			lowerBound2 = ( (Float)(0) );
            		}
            		else {
HXLINE( 703)			lowerBound2 = ( (Float)(selectionWidth1) );
            		}
HXDLIN( 703)		Float selectionWidth2;
HXDLIN( 703)		bool selectionWidth3;
HXDLIN( 703)		if (::hx::IsNotNull( Max2 )) {
HXLINE( 703)			selectionWidth3 = ::hx::IsGreater( lowerBound2,Max2 );
            		}
            		else {
HXLINE( 703)			selectionWidth3 = false;
            		}
HXDLIN( 703)		if (selectionWidth3) {
HXLINE( 703)			selectionWidth2 = ( (Float)(Max2) );
            		}
            		else {
HXLINE( 703)			selectionWidth2 = lowerBound2;
            		}
HXDLIN( 703)		selectionWidth1 = ::Std_obj::_hx_int(selectionWidth2);
HXLINE( 704)		 ::Dynamic Max3 = this->heightInTiles;
HXDLIN( 704)		Float lowerBound3;
HXDLIN( 704)		if ((selectionHeight1 < 0)) {
HXLINE( 704)			lowerBound3 = ( (Float)(0) );
            		}
            		else {
HXLINE( 704)			lowerBound3 = ( (Float)(selectionHeight1) );
            		}
HXDLIN( 704)		Float selectionHeight2;
HXDLIN( 704)		bool selectionHeight3;
HXDLIN( 704)		if (::hx::IsNotNull( Max3 )) {
HXLINE( 704)			selectionHeight3 = ::hx::IsGreater( lowerBound3,Max3 );
            		}
            		else {
HXLINE( 704)			selectionHeight3 = false;
            		}
HXDLIN( 704)		if (selectionHeight3) {
HXLINE( 704)			selectionHeight2 = ( (Float)(Max3) );
            		}
            		else {
HXLINE( 704)			selectionHeight2 = lowerBound3;
            		}
HXDLIN( 704)		selectionHeight1 = ::Std_obj::_hx_int(selectionHeight2);
HXLINE( 707)		int rowStart = (selectionY * this->widthInTiles);
HXLINE( 708)		int column;
HXLINE( 709)		 ::flixel::tile::FlxTile tile;
HXLINE( 710)		bool overlapFound;
HXLINE( 711)		Float deltaX = (xPos - this->last->x);
HXLINE( 712)		Float deltaY = (yPos - this->last->y);
HXLINE( 714)		{
HXLINE( 714)			int _g = selectionY;
HXDLIN( 714)			int _g1 = selectionHeight1;
HXDLIN( 714)			while((_g < _g1)){
HXLINE( 714)				_g = (_g + 1);
HXDLIN( 714)				int row = (_g - 1);
HXLINE( 716)				column = selectionX;
HXLINE( 718)				while((column < selectionWidth1)){
HXLINE( 720)					int index = (rowStart + column);
HXLINE( 721)					bool _hx_tmp;
HXDLIN( 721)					if ((index >= 0)) {
HXLINE( 721)						_hx_tmp = (index > (this->_data->length - 1));
            					}
            					else {
HXLINE( 721)						_hx_tmp = true;
            					}
HXDLIN( 721)					if (_hx_tmp) {
HXLINE( 723)						column = (column + 1);
HXLINE( 724)						continue;
            					}
HXLINE( 727)					int dataIndex = this->_data->__get(index);
HXLINE( 728)					if ((dataIndex < 0)) {
HXLINE( 730)						column = (column + 1);
HXLINE( 731)						continue;
            					}
HXLINE( 734)					tile = Dynamic( this->_tileObjects->__get(dataIndex)).StaticCast<  ::flixel::tile::FlxTile >();
HXLINE( 735)					tile->set_width(this->scaledTileWidth);
HXLINE( 736)					tile->set_height(this->scaledTileHeight);
HXLINE( 737)					tile->set_x((xPos + (( (Float)(column) ) * tile->get_width())));
HXLINE( 738)					tile->set_y((yPos + (( (Float)(row) ) * tile->get_height())));
HXLINE( 739)					tile->last->set_x((tile->x - deltaX));
HXLINE( 740)					tile->last->set_y((tile->y - deltaY));
HXLINE( 742)					bool overlapFound1;
HXDLIN( 742)					bool overlapFound2;
HXDLIN( 742)					Float object1 = object->x;
HXDLIN( 742)					Float overlapFound3 = (object1 + object->get_width());
HXDLIN( 742)					if ((overlapFound3 > tile->x)) {
HXLINE( 743)						Float object2 = object->x;
HXDLIN( 743)						Float tile1 = tile->x;
HXLINE( 742)						overlapFound2 = (object2 < (tile1 + tile->get_width()));
            					}
            					else {
HXLINE( 742)						overlapFound2 = false;
            					}
HXDLIN( 742)					if (overlapFound2) {
HXLINE( 744)						Float object3 = object->y;
HXDLIN( 744)						Float overlapFound4 = (object3 + object->get_height());
HXLINE( 742)						overlapFound1 = (overlapFound4 > tile->y);
            					}
            					else {
HXLINE( 742)						overlapFound1 = false;
            					}
HXDLIN( 742)					if (overlapFound1) {
HXLINE( 745)						Float object4 = object->y;
HXDLIN( 745)						Float tile2 = tile->y;
HXDLIN( 745)						overlapFound = (object4 < (tile2 + tile->get_height()));
            					}
            					else {
HXLINE( 742)						overlapFound = false;
            					}
HXLINE( 747)					if ((tile->allowCollisions != 0)) {
HXLINE( 749)						if (::hx::IsNotNull( callback )) {
HXLINE( 751)							if (flipCallbackParams) {
HXLINE( 753)								overlapFound = ( (bool)(callback(object,tile)) );
            							}
            							else {
HXLINE( 757)								overlapFound = ( (bool)(callback(tile,object)) );
            							}
            						}
            					}
HXLINE( 762)					if (overlapFound) {
HXLINE( 764)						bool _hx_tmp1;
HXDLIN( 764)						if (::hx::IsNotNull( tile->callbackFunction )) {
HXLINE( 764)							if (::hx::IsNotNull( tile->filter )) {
HXLINE( 764)								_hx_tmp1 = ::Std_obj::isOfType(object,tile->filter);
            							}
            							else {
HXLINE( 764)								_hx_tmp1 = true;
            							}
            						}
            						else {
HXLINE( 764)							_hx_tmp1 = false;
            						}
HXDLIN( 764)						if (_hx_tmp1) {
HXLINE( 766)							tile->mapIndex = (rowStart + column);
HXLINE( 767)							tile->callbackFunction(tile,object);
            						}
HXLINE( 770)						if ((tile->allowCollisions != 0)) {
HXLINE( 771)							results = true;
            						}
            					}
HXLINE( 774)					column = (column + 1);
            				}
HXLINE( 777)				rowStart = (rowStart + this->widthInTiles);
            			}
            		}
HXLINE( 780)		return results;
            	}


int FlxTilemap_obj::getTileIndexByCoords( ::flixel::math::FlxBasePoint coord){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_784_getTileIndexByCoords)
HXLINE( 785)		Float localX = (coord->x - this->x);
HXLINE( 786)		Float localY = (coord->y - this->y);
HXLINE( 787)		if (coord->_weak) {
HXLINE( 787)			coord->put();
            		}
HXLINE( 789)		bool _hx_tmp;
HXDLIN( 789)		bool _hx_tmp1;
HXDLIN( 789)		bool _hx_tmp2;
HXDLIN( 789)		if (!((localX < 0))) {
HXLINE( 789)			_hx_tmp2 = (localY < 0);
            		}
            		else {
HXLINE( 789)			_hx_tmp2 = true;
            		}
HXDLIN( 789)		if (!(_hx_tmp2)) {
HXLINE( 789)			_hx_tmp1 = (localX >= (( (Float)(this->widthInTiles) ) * this->scaledTileWidth));
            		}
            		else {
HXLINE( 789)			_hx_tmp1 = true;
            		}
HXDLIN( 789)		if (!(_hx_tmp1)) {
HXLINE( 789)			_hx_tmp = (localY >= (( (Float)(this->heightInTiles) ) * this->scaledTileHeight));
            		}
            		else {
HXLINE( 789)			_hx_tmp = true;
            		}
HXDLIN( 789)		if (_hx_tmp) {
HXLINE( 790)			return -1;
            		}
HXLINE( 792)		int _hx_tmp3 = ::Std_obj::_hx_int((localY / this->scaledTileHeight));
HXDLIN( 792)		int _hx_tmp4 = (_hx_tmp3 * this->widthInTiles);
HXDLIN( 792)		return (_hx_tmp4 + ::Std_obj::_hx_int((localX / this->scaledTileWidth)));
            	}


 ::flixel::math::FlxBasePoint FlxTilemap_obj::getTileCoordsByIndex(int index,::hx::Null< bool >  __o_midpoint){
            		bool midpoint = __o_midpoint.Default(true);
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_796_getTileCoordsByIndex)
HXLINE( 797)		Float x = (this->x + (( (Float)(::hx::Mod(index,this->widthInTiles)) ) * this->scaledTileWidth));
HXDLIN( 797)		Float y = this->y;
HXDLIN( 797)		int y1 = ::Std_obj::_hx_int((( (Float)(index) ) / ( (Float)(this->widthInTiles) )));
HXDLIN( 797)		Float y2 = (y + (( (Float)(y1) ) * this->scaledTileHeight));
HXDLIN( 797)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get()->set(x,y2);
HXDLIN( 797)		point->_inPool = false;
HXDLIN( 797)		 ::flixel::math::FlxBasePoint point1 = point;
HXLINE( 798)		if (midpoint) {
HXLINE( 800)			point1->set_x((point1->x + (this->scaledTileWidth * ((Float)0.5))));
HXLINE( 801)			point1->set_y((point1->y + (this->scaledTileHeight * ((Float)0.5))));
            		}
HXLINE( 803)		return point1;
            	}


::Array< ::Dynamic> FlxTilemap_obj::getTileCoords(int index,::hx::Null< bool >  __o_midpoint){
            		bool midpoint = __o_midpoint.Default(true);
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_814_getTileCoords)
HXLINE( 815)		::Array< ::Dynamic> array = null();
HXLINE( 817)		 ::flixel::math::FlxBasePoint point;
HXLINE( 818)		int l = (this->widthInTiles * this->heightInTiles);
HXLINE( 820)		{
HXLINE( 820)			int _g = 0;
HXDLIN( 820)			int _g1 = l;
HXDLIN( 820)			while((_g < _g1)){
HXLINE( 820)				_g = (_g + 1);
HXDLIN( 820)				int i = (_g - 1);
HXLINE( 822)				if ((this->_data->__get(i) == index)) {
HXLINE( 824)					Float x = (this->x + (( (Float)(::hx::Mod(i,this->widthInTiles)) ) * this->scaledTileWidth));
HXDLIN( 824)					Float y = this->y;
HXDLIN( 824)					int y1 = ::Std_obj::_hx_int((( (Float)(i) ) / ( (Float)(this->widthInTiles) )));
HXDLIN( 824)					Float y2 = (y + (( (Float)(y1) ) * this->scaledTileHeight));
HXDLIN( 824)					 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get()->set(x,y2);
HXDLIN( 824)					point1->_inPool = false;
HXDLIN( 824)					point = point1;
HXLINE( 826)					if (midpoint) {
HXLINE( 828)						point->set_x((point->x + (this->scaledTileWidth * ((Float)0.5))));
HXLINE( 829)						point->set_y((point->y + (this->scaledTileHeight * ((Float)0.5))));
            					}
HXLINE( 832)					if (::hx::IsNull( array )) {
HXLINE( 834)						array = ::Array_obj< ::Dynamic>::__new();
            					}
HXLINE( 836)					array->push(point);
            				}
            			}
            		}
HXLINE( 840)		return array;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTilemap_obj,getTileCoords,return )

void FlxTilemap_obj::follow( ::flixel::FlxCamera camera,::hx::Null< int >  __o_border,::hx::Null< bool >  __o_updateWorld){
            		int border = __o_border.Default(0);
            		bool updateWorld = __o_updateWorld.Default(true);
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_851_follow)
HXLINE( 852)		if (::hx::IsNull( camera )) {
HXLINE( 853)			camera = ::flixel::FlxG_obj::camera;
            		}
HXLINE( 855)		camera->setScrollBoundsRect((this->x + (( (Float)(border) ) * this->scaledTileWidth)),(this->y + (( (Float)(border) ) * this->scaledTileHeight)),((( (Float)(this->widthInTiles) ) * this->scaledTileWidth) - ((( (Float)(border) ) * this->scaledTileWidth) * ( (Float)(2) ))),((( (Float)(this->heightInTiles) ) * this->scaledTileHeight) - ((( (Float)(border) ) * this->scaledTileHeight) * ( (Float)(2) ))),updateWorld);
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxTilemap_obj,follow,(void))

bool FlxTilemap_obj::ray( ::flixel::math::FlxBasePoint start, ::flixel::math::FlxBasePoint end, ::flixel::math::FlxBasePoint result){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_877_ray)
HXLINE( 879)		 ::flixel::math::FlxBasePoint trimmedStart = this->calcRayEntry(start,end,null());
HXLINE( 880)		 ::flixel::math::FlxBasePoint result1 = null();
HXDLIN( 880)		 ::flixel::math::FlxBasePoint trimmedEnd = this->calcRayEntry(end,start,result1);
HXLINE( 882)		if (start->_weak) {
HXLINE( 882)			start->put();
            		}
HXLINE( 883)		if (end->_weak) {
HXLINE( 883)			end->put();
            		}
HXLINE( 885)		bool _hx_tmp;
HXDLIN( 885)		if (::hx::IsNotNull( trimmedStart )) {
HXLINE( 885)			_hx_tmp = ::hx::IsNull( trimmedEnd );
            		}
            		else {
HXLINE( 885)			_hx_tmp = true;
            		}
HXDLIN( 885)		if (_hx_tmp) {
HXLINE( 887)			::flixel::util::FlxDestroyUtil_obj::put(trimmedStart);
HXLINE( 888)			::flixel::util::FlxDestroyUtil_obj::put(trimmedEnd);
HXLINE( 889)			return true;
            		}
HXLINE( 892)		start = trimmedStart;
HXLINE( 893)		end = trimmedEnd;
HXLINE( 901)		int startIndex = this->getTileIndexByCoords(start);
HXLINE( 902)		int endIndex = this->getTileIndexByCoords(end);
HXLINE( 905)		if ((this->getTileCollisions(this->getTileByIndex(startIndex)) != 0)) {
HXLINE( 907)			if (::hx::IsNotNull( result )) {
HXLINE( 908)				{
HXLINE( 908)					Float y = start->y;
HXDLIN( 908)					result->set_x(start->x);
HXDLIN( 908)					result->set_y(y);
            				}
HXDLIN( 908)				if (start->_weak) {
HXLINE( 908)					start->put();
            				}
            			}
HXLINE( 910)			{
HXLINE( 910)				trimmedStart->put();
HXDLIN( 910)				trimmedEnd->put();
            			}
HXLINE( 911)			return false;
            		}
HXLINE( 914)		int startTileX = ::hx::Mod(startIndex,this->widthInTiles);
HXLINE( 915)		int startTileY = ::Std_obj::_hx_int((( (Float)(startIndex) ) / ( (Float)(this->widthInTiles) )));
HXLINE( 916)		int endTileX = ::hx::Mod(endIndex,this->widthInTiles);
HXLINE( 917)		int endTileY = ::Std_obj::_hx_int((( (Float)(endIndex) ) / ( (Float)(this->widthInTiles) )));
HXLINE( 918)		int hitIndex = -1;
HXLINE( 920)		if ((start->x == end->x)) {
HXLINE( 922)			hitIndex = this->checkColumn(startTileX,startTileY,endTileY);
HXLINE( 923)			bool _hx_tmp1;
HXDLIN( 923)			if ((hitIndex != -1)) {
HXLINE( 923)				_hx_tmp1 = ::hx::IsNotNull( result );
            			}
            			else {
HXLINE( 923)				_hx_tmp1 = false;
            			}
HXDLIN( 923)			if (_hx_tmp1) {
HXLINE( 926)				{
HXLINE( 926)					 ::flixel::math::FlxBasePoint p = this->getTileCoordsByIndex(hitIndex,false);
HXDLIN( 926)					{
HXLINE( 926)						Float y1 = p->y;
HXDLIN( 926)						result->set_x(p->x);
HXDLIN( 926)						result->set_y(y1);
            					}
HXDLIN( 926)					if (p->_weak) {
HXLINE( 926)						p->put();
            					}
            				}
HXLINE( 927)				result->set_x(start->x);
HXLINE( 928)				if ((start->y > end->y)) {
HXLINE( 929)					result->set_y((result->y + this->scaledTileHeight));
            				}
            			}
            		}
            		else {
HXLINE( 935)			Float m = ((start->y - end->y) / (start->x - end->x));
HXLINE( 937)			Float b = (start->y - (m * start->x));
HXLINE( 939)			bool movesRight = (start->x < end->x);
HXLINE( 940)			int inc;
HXDLIN( 940)			if (movesRight) {
HXLINE( 940)				inc = 1;
            			}
            			else {
HXLINE( 940)				inc = -1;
            			}
HXLINE( 941)			int offset;
HXDLIN( 941)			if (movesRight) {
HXLINE( 941)				offset = 1;
            			}
            			else {
HXLINE( 941)				offset = 0;
            			}
HXLINE( 942)			int tileX = startTileX;
HXLINE( 943)			int tileY = 0;
HXLINE( 944)			Float xPos = ((Float)0.0);
HXLINE( 945)			Float yPos = ((Float)0.0);
HXLINE( 946)			int lastTileY = startTileY;
HXLINE( 948)			while((tileX != endTileX)){
HXLINE( 950)				xPos = (this->x + (( (Float)((tileX + offset)) ) * this->scaledTileWidth));
HXLINE( 951)				yPos = ((m * xPos) + b);
HXLINE( 952)				tileY = ::Math_obj::floor(((yPos - this->y) / this->scaledTileHeight));
HXLINE( 953)				hitIndex = this->checkColumn(tileX,lastTileY,tileY);
HXLINE( 954)				if ((hitIndex != -1)) {
HXLINE( 955)					goto _hx_goto_35;
            				}
HXLINE( 956)				lastTileY = tileY;
HXLINE( 957)				tileX = (tileX + inc);
            			}
            			_hx_goto_35:;
HXLINE( 960)			if ((hitIndex == -1)) {
HXLINE( 961)				hitIndex = this->checkColumn(endTileX,lastTileY,endTileY);
            			}
HXLINE( 963)			bool _hx_tmp2;
HXDLIN( 963)			if ((hitIndex != -1)) {
HXLINE( 963)				_hx_tmp2 = ::hx::IsNotNull( result );
            			}
            			else {
HXLINE( 963)				_hx_tmp2 = false;
            			}
HXDLIN( 963)			if (_hx_tmp2) {
HXLINE( 965)				{
HXLINE( 965)					 ::flixel::math::FlxBasePoint p1 = this->getTileCoordsByIndex(hitIndex,false);
HXDLIN( 965)					{
HXLINE( 965)						Float y2 = p1->y;
HXDLIN( 965)						result->set_x(p1->x);
HXDLIN( 965)						result->set_y(y2);
            					}
HXDLIN( 965)					if (p1->_weak) {
HXLINE( 965)						p1->put();
            					}
            				}
HXLINE( 966)				if ((::Std_obj::_hx_int((( (Float)(hitIndex) ) / ( (Float)(this->widthInTiles) ))) == lastTileY)) {
HXLINE( 968)					if ((start->x > end->x)) {
HXLINE( 969)						result->set_x((result->x + this->scaledTileWidth));
            					}
HXLINE( 972)					result->set_y(((m * result->x) + b));
            				}
            				else {
HXLINE( 977)					if ((start->y > end->y)) {
HXLINE( 980)						result->set_y((result->y + this->scaledTileHeight));
            					}
HXLINE( 985)					result->set_x(((result->y - b) / m));
            				}
            			}
            		}
HXLINE( 990)		{
HXLINE( 990)			trimmedStart->put();
HXDLIN( 990)			trimmedEnd->put();
            		}
HXLINE( 991)		return (hitIndex == -1);
            	}


int FlxTilemap_obj::checkColumn(int x,int startY,int endY){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_995_checkColumn)
HXLINE( 996)		if ((startY < 0)) {
HXLINE( 997)			startY = 0;
            		}
HXLINE( 999)		if ((endY < 0)) {
HXLINE(1000)			endY = 0;
            		}
HXLINE(1002)		if ((startY > (this->heightInTiles - 1))) {
HXLINE(1003)			startY = (this->heightInTiles - 1);
            		}
HXLINE(1005)		if ((endY > (this->heightInTiles - 1))) {
HXLINE(1006)			endY = (this->heightInTiles - 1);
            		}
HXLINE(1008)		int y = startY;
HXLINE(1009)		int step;
HXDLIN(1009)		if ((startY <= endY)) {
HXLINE(1009)			step = 1;
            		}
            		else {
HXLINE(1009)			step = -1;
            		}
HXLINE(1010)		while(true){
HXLINE(1012)			int index = ((y * this->widthInTiles) + x);
HXLINE(1013)			if ((this->getTileCollisions(this->getTileByIndex(index)) != 0)) {
HXLINE(1014)				return index;
            			}
HXLINE(1016)			if ((y == endY)) {
HXLINE(1017)				goto _hx_goto_37;
            			}
HXLINE(1019)			y = (y + step);
            		}
            		_hx_goto_37:;
HXLINE(1022)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxTilemap_obj,checkColumn,return )

bool FlxTilemap_obj::rayStep( ::flixel::math::FlxBasePoint start, ::flixel::math::FlxBasePoint end, ::flixel::math::FlxBasePoint result,::hx::Null< Float >  __o_resolution){
            		Float resolution = __o_resolution.Default(1);
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1040_rayStep)
HXLINE(1041)		Float step = this->scaledTileWidth;
HXLINE(1043)		if ((this->scaledTileHeight < this->scaledTileWidth)) {
HXLINE(1044)			step = this->scaledTileHeight;
            		}
HXLINE(1046)		step = (step / resolution);
HXLINE(1047)		Float deltaX = (end->x - start->x);
HXLINE(1048)		Float deltaY = (end->y - start->y);
HXLINE(1049)		Float distance = ::Math_obj::sqrt(((deltaX * deltaX) + (deltaY * deltaY)));
HXLINE(1050)		int steps = ::Math_obj::ceil((distance / step));
HXLINE(1051)		Float stepX = (deltaX / ( (Float)(steps) ));
HXLINE(1052)		Float stepY = (deltaY / ( (Float)(steps) ));
HXLINE(1053)		Float curX = ((start->x - stepX) - this->x);
HXLINE(1054)		Float curY = ((start->y - stepY) - this->y);
HXLINE(1055)		int tileX;
HXLINE(1056)		int tileY;
HXLINE(1057)		int i = 0;
HXLINE(1059)		if (start->_weak) {
HXLINE(1059)			start->put();
            		}
HXLINE(1060)		if (end->_weak) {
HXLINE(1060)			end->put();
            		}
HXLINE(1062)		while((i < steps)){
HXLINE(1064)			curX = (curX + stepX);
HXLINE(1065)			curY = (curY + stepY);
HXLINE(1067)			bool _hx_tmp;
HXDLIN(1067)			bool _hx_tmp1;
HXDLIN(1067)			bool _hx_tmp2;
HXDLIN(1067)			if (!((curX < 0))) {
HXLINE(1067)				_hx_tmp2 = (curX > (( (Float)(this->widthInTiles) ) * this->scaledTileWidth));
            			}
            			else {
HXLINE(1067)				_hx_tmp2 = true;
            			}
HXDLIN(1067)			if (!(_hx_tmp2)) {
HXLINE(1067)				_hx_tmp1 = (curY < 0);
            			}
            			else {
HXLINE(1067)				_hx_tmp1 = true;
            			}
HXDLIN(1067)			if (!(_hx_tmp1)) {
HXLINE(1067)				_hx_tmp = (curY > (( (Float)(this->heightInTiles) ) * this->scaledTileHeight));
            			}
            			else {
HXLINE(1067)				_hx_tmp = true;
            			}
HXDLIN(1067)			if (_hx_tmp) {
HXLINE(1069)				i = (i + 1);
HXLINE(1070)				continue;
            			}
HXLINE(1073)			tileX = ::Math_obj::floor((curX / this->scaledTileWidth));
HXLINE(1074)			tileY = ::Math_obj::floor((curY / this->scaledTileHeight));
HXLINE(1076)			if ((Dynamic( this->_tileObjects->__get(this->_data->__get(((tileY * this->widthInTiles) + tileX)))).StaticCast<  ::flixel::tile::FlxTile >()->allowCollisions != 0)) {
HXLINE(1079)				tileX = (tileX * ::Std_obj::_hx_int(this->scaledTileWidth));
HXLINE(1080)				tileY = (tileY * ::Std_obj::_hx_int(this->scaledTileHeight));
HXLINE(1081)				Float rx = ( (Float)(0) );
HXLINE(1082)				Float ry = ( (Float)(0) );
HXLINE(1084)				Float lx = (curX - stepX);
HXLINE(1085)				Float ly = (curY - stepY);
HXLINE(1083)				Float q = ( (Float)(tileX) );
HXLINE(1090)				if ((deltaX < 0)) {
HXLINE(1092)					q = (q + this->scaledTileWidth);
            				}
HXLINE(1095)				rx = q;
HXLINE(1096)				ry = (ly + (stepY * ((q - lx) / stepX)));
HXLINE(1098)				bool _hx_tmp3;
HXDLIN(1098)				if ((ry >= tileY)) {
HXLINE(1098)					_hx_tmp3 = (ry <= (tileY + this->scaledTileHeight));
            				}
            				else {
HXLINE(1098)					_hx_tmp3 = false;
            				}
HXDLIN(1098)				if (_hx_tmp3) {
HXLINE(1100)					if (::hx::IsNull( result )) {
HXLINE(1102)						 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(1102)						point->_inPool = false;
HXDLIN(1102)						result = point;
            					}
HXLINE(1105)					{
HXLINE(1105)						Float y = (ry + this->y);
HXDLIN(1105)						result->set_x((rx + this->x));
HXDLIN(1105)						result->set_y(y);
            					}
HXLINE(1106)					return false;
            				}
HXLINE(1110)				q = ( (Float)(tileY) );
HXLINE(1112)				if ((deltaY < 0)) {
HXLINE(1114)					q = (q + this->scaledTileHeight);
            				}
HXLINE(1117)				rx = (lx + (stepX * ((q - ly) / stepY)));
HXLINE(1118)				ry = q;
HXLINE(1120)				bool _hx_tmp4;
HXDLIN(1120)				if ((rx >= tileX)) {
HXLINE(1120)					_hx_tmp4 = (rx <= (tileX + this->scaledTileWidth));
            				}
            				else {
HXLINE(1120)					_hx_tmp4 = false;
            				}
HXDLIN(1120)				if (_hx_tmp4) {
HXLINE(1122)					if (::hx::IsNull( result )) {
HXLINE(1124)						 ::flixel::math::FlxBasePoint point1 = ::flixel::math::FlxBasePoint_obj::pool->get()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(1124)						point1->_inPool = false;
HXDLIN(1124)						result = point1;
            					}
HXLINE(1127)					{
HXLINE(1127)						Float y1 = (ry + this->y);
HXDLIN(1127)						result->set_x((rx + this->x));
HXDLIN(1127)						result->set_y(y1);
            					}
HXLINE(1128)					return false;
            				}
HXLINE(1131)				return true;
            			}
HXLINE(1133)			i = (i + 1);
            		}
HXLINE(1136)		return true;
            	}


 ::flixel::FlxSprite FlxTilemap_obj::tileToSprite(int X,int Y,::hx::Null< int >  __o_NewTile, ::Dynamic SpriteFactory){
            		int NewTile = __o_NewTile.Default(0);
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1149_tileToSprite)
HXLINE(1150)		if (::hx::IsNull( SpriteFactory )) {
HXLINE(1151)			SpriteFactory = this->defaultTileToSprite_dyn();
            		}
HXLINE(1153)		int rowIndex = (X + (Y * this->widthInTiles));
HXLINE(1154)		 ::flixel::tile::FlxTile tile = Dynamic( this->_tileObjects->__get(this->_data->__get(rowIndex))).StaticCast<  ::flixel::tile::FlxTile >();
HXLINE(1155)		 ::flixel::graphics::frames::FlxImageFrame image = null();
HXLINE(1157)		bool _hx_tmp;
HXDLIN(1157)		if (::hx::IsNotNull( tile )) {
HXLINE(1157)			_hx_tmp = tile->visible;
            		}
            		else {
HXLINE(1157)			_hx_tmp = false;
            		}
HXDLIN(1157)		if (_hx_tmp) {
HXLINE(1158)			image = ::flixel::graphics::frames::FlxImageFrame_obj::fromFrame(tile->frame);
            		}
            		else {
HXLINE(1160)			 ::flixel::graphics::FlxGraphic image1 = this->graphic;
HXDLIN(1160)			Float Width = ( (Float)(this->tileWidth) );
HXDLIN(1160)			Float Height = ( (Float)(this->tileHeight) );
HXDLIN(1160)			 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN(1160)			_this->x = ( (Float)(0) );
HXDLIN(1160)			_this->y = ( (Float)(0) );
HXDLIN(1160)			_this->width = Width;
HXDLIN(1160)			_this->height = Height;
HXDLIN(1160)			 ::flixel::math::FlxRect rect = _this;
HXDLIN(1160)			rect->_inPool = false;
HXDLIN(1160)			image = ::flixel::graphics::frames::FlxImageFrame_obj::fromEmptyFrame(image1,rect);
            		}
HXLINE(1162)		Float tileX = ((( (Float)((X * this->tileWidth)) ) * this->scale->x) + this->x);
HXLINE(1163)		Float tileY = ((( (Float)((Y * this->tileHeight)) ) * this->scale->y) + this->y);
HXLINE(1168)		 ::flixel::math::FlxBasePoint point = ::flixel::math::FlxBasePoint_obj::pool->get()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(1168)		point->_inPool = false;
HXDLIN(1168)		 ::flixel::math::FlxBasePoint this1 = point;
HXDLIN(1168)		 ::flixel::math::FlxBasePoint p = this->scale;
HXDLIN(1168)		{
HXLINE(1168)			Float y = p->y;
HXDLIN(1168)			this1->set_x(p->x);
HXDLIN(1168)			this1->set_y(y);
            		}
HXDLIN(1168)		if (p->_weak) {
HXLINE(1168)			p->put();
            		}
HXLINE(1164)		 ::flixel::FlxSprite tileSprite = ( ( ::flixel::FlxSprite)(SpriteFactory( ::Dynamic(::hx::Anon_obj::Create(6)
            			->setFixed(0,HX_("blend",51,e8,f4,b4),this->blend)
            			->setFixed(1,HX_("x",78,00,00,00),tileX)
            			->setFixed(2,HX_("y",79,00,00,00),tileY)
            			->setFixed(3,HX_("alpha",5e,a7,96,21),this->alpha)
            			->setFixed(4,HX_("graphic",a8,5a,07,74),image)
            			->setFixed(5,HX_("scale",8a,ce,ce,78),this1)))) );
HXLINE(1173)		if ((NewTile >= 0)) {
HXLINE(1174)			this->setTile(X,Y,NewTile,null());
            		}
HXLINE(1176)		return tileSprite;
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxTilemap_obj,tileToSprite,return )

void FlxTilemap_obj::updateBuffers(){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1183_updateBuffers)
HXLINE(1184)		::flixel::util::FlxDestroyUtil_obj::destroyArray(this->_buffers);
HXLINE(1185)		this->_buffers = ::Array_obj< ::Dynamic>::__new(0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTilemap_obj,updateBuffers,(void))

void FlxTilemap_obj::drawTilemap( ::flixel::tile::FlxTilemapBuffer buffer, ::flixel::FlxCamera camera){
            	HX_GC_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1196_drawTilemap)
HXLINE(1197)		bool isColored;
HXDLIN(1197)		if ((this->alpha == 1)) {
HXLINE(1197)			isColored = (this->color != 16777215);
            		}
            		else {
HXLINE(1197)			isColored = true;
            		}
HXLINE(1200)		Float drawX = ( (Float)(0) );
HXLINE(1201)		Float drawY = ( (Float)(0) );
HXLINE(1202)		Float scaledWidth = ( (Float)(0) );
HXLINE(1203)		Float scaledHeight = ( (Float)(0) );
HXLINE(1204)		 ::flixel::graphics::tile::FlxDrawQuadsItem drawItem = null();
HXLINE(1206)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1208)			buffer->fill(null());
            		}
            		else {
HXLINE(1212)			{
HXLINE(1212)				 ::flixel::math::FlxBasePoint this1 = this->getScreenPosition(this->_point,camera);
HXDLIN(1212)				 ::flixel::math::FlxBasePoint point = this->offset;
HXDLIN(1212)				{
HXLINE(1212)					Float y = point->y;
HXDLIN(1212)					this1->set_x((this1->x - point->x));
HXDLIN(1212)					this1->set_y((this1->y - y));
            				}
HXDLIN(1212)				if (point->_weak) {
HXLINE(1212)					point->put();
            				}
HXDLIN(1212)				 ::flixel::math::FlxBasePoint this2 = this1;
HXDLIN(1212)				 ::openfl::geom::Point p = this->_helperPoint;
HXDLIN(1212)				if (::hx::IsNull( p )) {
HXLINE(1212)					p =  ::openfl::geom::Point_obj::__alloc( HX_CTX ,null(),null());
            				}
HXDLIN(1212)				p->x = this2->x;
HXDLIN(1212)				p->y = this2->y;
            			}
HXLINE(1214)			Float _hx_tmp;
HXDLIN(1214)			if (this->isPixelPerfectRender(camera)) {
HXLINE(1214)				_hx_tmp = ( (Float)(::Math_obj::floor(this->_helperPoint->x)) );
            			}
            			else {
HXLINE(1214)				_hx_tmp = this->_helperPoint->x;
            			}
HXDLIN(1214)			this->_helperPoint->x = _hx_tmp;
HXLINE(1215)			Float _hx_tmp1;
HXDLIN(1215)			if (this->isPixelPerfectRender(camera)) {
HXLINE(1215)				_hx_tmp1 = ( (Float)(::Math_obj::floor(this->_helperPoint->y)) );
            			}
            			else {
HXLINE(1215)				_hx_tmp1 = this->_helperPoint->y;
            			}
HXDLIN(1215)			this->_helperPoint->y = _hx_tmp1;
HXLINE(1217)			scaledWidth = this->scaledTileWidth;
HXLINE(1218)			scaledHeight = this->scaledTileHeight;
HXLINE(1220)			bool hasColorOffsets;
HXDLIN(1220)			if (::hx::IsNotNull( this->colorTransform )) {
HXLINE(1220)				hasColorOffsets = ::flixel::util::FlxColorTransformUtil_obj::hasRGBAOffsets(this->colorTransform);
            			}
            			else {
HXLINE(1220)				hasColorOffsets = false;
            			}
HXLINE(1221)			drawItem = camera->startQuadBatch(this->graphic,isColored,hasColorOffsets,this->blend,this->antialiasing,this->shader);
            		}
HXLINE(1225)		this->_point->set_x(((((camera->scroll->x * this->scrollFactor->x) - this->x) - this->offset->x) + camera->viewMarginX));
HXLINE(1226)		this->_point->set_y(((((camera->scroll->y * this->scrollFactor->y) - this->y) - this->offset->y) + camera->viewMarginY));
HXLINE(1228)		int screenXInTiles = ::Math_obj::floor((this->_point->x / this->scaledTileWidth));
HXLINE(1229)		int screenYInTiles = ::Math_obj::floor((this->_point->y / this->scaledTileHeight));
HXLINE(1230)		int screenRows = buffer->rows;
HXLINE(1231)		int screenColumns = buffer->columns;
HXLINE(1234)		 ::Dynamic Max = (this->widthInTiles - screenColumns);
HXDLIN(1234)		Float lowerBound;
HXDLIN(1234)		if ((screenXInTiles < 0)) {
HXLINE(1234)			lowerBound = ( (Float)(0) );
            		}
            		else {
HXLINE(1234)			lowerBound = ( (Float)(screenXInTiles) );
            		}
HXDLIN(1234)		Float screenXInTiles1;
HXDLIN(1234)		bool screenXInTiles2;
HXDLIN(1234)		if (::hx::IsNotNull( Max )) {
HXLINE(1234)			screenXInTiles2 = ::hx::IsGreater( lowerBound,Max );
            		}
            		else {
HXLINE(1234)			screenXInTiles2 = false;
            		}
HXDLIN(1234)		if (screenXInTiles2) {
HXLINE(1234)			screenXInTiles1 = ( (Float)(Max) );
            		}
            		else {
HXLINE(1234)			screenXInTiles1 = lowerBound;
            		}
HXDLIN(1234)		screenXInTiles = ::Std_obj::_hx_int(screenXInTiles1);
HXLINE(1235)		 ::Dynamic Max1 = (this->heightInTiles - screenRows);
HXDLIN(1235)		Float lowerBound1;
HXDLIN(1235)		if ((screenYInTiles < 0)) {
HXLINE(1235)			lowerBound1 = ( (Float)(0) );
            		}
            		else {
HXLINE(1235)			lowerBound1 = ( (Float)(screenYInTiles) );
            		}
HXDLIN(1235)		Float screenYInTiles1;
HXDLIN(1235)		bool screenYInTiles2;
HXDLIN(1235)		if (::hx::IsNotNull( Max1 )) {
HXLINE(1235)			screenYInTiles2 = ::hx::IsGreater( lowerBound1,Max1 );
            		}
            		else {
HXLINE(1235)			screenYInTiles2 = false;
            		}
HXDLIN(1235)		if (screenYInTiles2) {
HXLINE(1235)			screenYInTiles1 = ( (Float)(Max1) );
            		}
            		else {
HXLINE(1235)			screenYInTiles1 = lowerBound1;
            		}
HXDLIN(1235)		screenYInTiles = ::Std_obj::_hx_int(screenYInTiles1);
HXLINE(1237)		int rowIndex = ((screenYInTiles * this->widthInTiles) + screenXInTiles);
HXLINE(1238)		this->_flashPoint->y = ( (Float)(0) );
HXLINE(1239)		int columnIndex;
HXLINE(1240)		 ::flixel::tile::FlxTile tile;
HXLINE(1241)		 ::flixel::graphics::frames::FlxFrame frame;
HXLINE(1244)		 ::openfl::display::BitmapData debugTile;
HXLINE(1247)		{
HXLINE(1247)			int _g = 0;
HXDLIN(1247)			int _g1 = screenRows;
HXDLIN(1247)			while((_g < _g1)){
HXLINE(1247)				_g = (_g + 1);
HXDLIN(1247)				int row = (_g - 1);
HXLINE(1249)				columnIndex = rowIndex;
HXLINE(1250)				this->_flashPoint->x = ( (Float)(0) );
HXLINE(1252)				{
HXLINE(1252)					int _g2 = 0;
HXDLIN(1252)					int _g3 = screenColumns;
HXDLIN(1252)					while((_g2 < _g3)){
HXLINE(1252)						_g2 = (_g2 + 1);
HXDLIN(1252)						int column = (_g2 - 1);
HXLINE(1254)						tile = Dynamic( this->_tileObjects->__get(this->_data->__get(columnIndex))).StaticCast<  ::flixel::tile::FlxTile >();
HXLINE(1256)						bool _hx_tmp2;
HXDLIN(1256)						bool _hx_tmp3;
HXDLIN(1256)						if (::hx::IsNotNull( tile )) {
HXLINE(1256)							_hx_tmp3 = tile->visible;
            						}
            						else {
HXLINE(1256)							_hx_tmp3 = false;
            						}
HXDLIN(1256)						if (_hx_tmp3) {
HXLINE(1256)							_hx_tmp2 = (tile->frame->type != 2);
            						}
            						else {
HXLINE(1256)							_hx_tmp2 = false;
            						}
HXDLIN(1256)						if (_hx_tmp2) {
HXLINE(1258)							frame = tile->frame;
HXLINE(1260)							if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1262)								frame->paint(buffer->pixels,this->_flashPoint,true,null());
HXLINE(1265)								bool _hx_tmp4;
HXDLIN(1265)								if (::flixel::FlxG_obj::debugger->drawDebug) {
HXLINE(1265)									_hx_tmp4 = !(this->ignoreDrawDebug);
            								}
            								else {
HXLINE(1265)									_hx_tmp4 = false;
            								}
HXDLIN(1265)								if (_hx_tmp4) {
HXLINE(1267)									if ((tile->allowCollisions <= 0)) {
HXLINE(1269)										debugTile = this->_debugTileNotSolid;
            									}
            									else {
HXLINE(1271)										if ((tile->allowCollisions != 4369)) {
HXLINE(1273)											debugTile = this->_debugTilePartial;
            										}
            										else {
HXLINE(1277)											debugTile = this->_debugTileSolid;
            										}
            									}
HXLINE(1280)									{
HXLINE(1280)										 ::flixel::math::FlxBasePoint this3 = this->offset;
HXDLIN(1280)										 ::openfl::geom::Point p1 = this->_flashPoint;
HXDLIN(1280)										 ::openfl::geom::Point p2 = p1;
HXDLIN(1280)										p2->x = (p2->x + this3->x);
HXDLIN(1280)										 ::openfl::geom::Point p3 = p1;
HXDLIN(1280)										p3->y = (p3->y + this3->y);
            									}
HXLINE(1281)									buffer->pixels->copyPixels(debugTile,this->_debugRect,this->_flashPoint,null(),null(),true);
HXLINE(1282)									{
HXLINE(1282)										 ::flixel::math::FlxBasePoint this4 = this->offset;
HXDLIN(1282)										 ::openfl::geom::Point p4 = this->_flashPoint;
HXDLIN(1282)										 ::openfl::geom::Point p5 = p4;
HXDLIN(1282)										p5->x = (p5->x - this4->x);
HXDLIN(1282)										 ::openfl::geom::Point p6 = p4;
HXDLIN(1282)										p6->y = (p6->y - this4->y);
            									}
            								}
            							}
            							else {
HXLINE(1288)								drawX = (this->_helperPoint->x + (( (Float)(::hx::Mod(columnIndex,this->widthInTiles)) ) * scaledWidth));
HXLINE(1289)								drawY = (this->_helperPoint->y + (( (Float)(::Math_obj::floor((( (Float)(columnIndex) ) / ( (Float)(this->widthInTiles) )))) ) * scaledHeight));
HXLINE(1291)								this->_matrix->identity();
HXLINE(1293)								if ((frame->angle != 0)) {
HXLINE(1295)									frame->prepareMatrix(this->_matrix,null(),null(),null());
            								}
HXLINE(1298)								Float scaleX = this->scale->x;
HXLINE(1299)								Float scaleY = this->scale->y;
HXLINE(1301)								this->_matrix->scale(scaleX,scaleY);
HXLINE(1302)								this->_matrix->translate(drawX,drawY);
HXLINE(1304)								drawItem->addQuad(frame,this->_matrix,this->colorTransform);
            							}
            						}
HXLINE(1308)						if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1309)							 ::openfl::geom::Point fh = this->_flashPoint;
HXDLIN(1309)							fh->x = (fh->x + this->tileWidth);
            						}
HXLINE(1311)						columnIndex = (columnIndex + 1);
            					}
            				}
HXLINE(1314)				if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1315)					 ::openfl::geom::Point fh1 = this->_flashPoint;
HXDLIN(1315)					fh1->y = (fh1->y + this->tileHeight);
            				}
HXLINE(1316)				rowIndex = (rowIndex + this->widthInTiles);
            			}
            		}
HXLINE(1319)		buffer->x = (( (Float)(screenXInTiles) ) * this->scaledTileWidth);
HXLINE(1320)		buffer->y = (( (Float)(screenYInTiles) ) * this->scaledTileHeight);
HXLINE(1322)		if (::flixel::FlxG_obj::renderBlit) {
HXLINE(1324)			if (isColored) {
HXLINE(1325)				buffer->colorTransform(this->colorTransform);
            			}
HXLINE(1326)			buffer->blend = this->blend;
            		}
HXLINE(1329)		buffer->dirty = false;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTilemap_obj,drawTilemap,(void))

 ::openfl::display::BitmapData FlxTilemap_obj::makeDebugTile(int color){
            	HX_GC_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1338_makeDebugTile)
HXLINE(1339)		if (::flixel::FlxG_obj::renderTile) {
HXLINE(1340)			return null();
            		}
HXLINE(1342)		 ::openfl::display::BitmapData debugTile =  ::openfl::display::BitmapData_obj::__alloc( HX_CTX ,this->tileWidth,this->tileHeight,true,0);
HXLINE(1343)		this->drawDebugTile(debugTile,color);
HXLINE(1344)		return debugTile;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,makeDebugTile,return )

void FlxTilemap_obj::drawDebugTile( ::openfl::display::BitmapData debugTile,int color){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1349_drawDebugTile)
HXDLIN(1349)		if ((color != 0)) {
HXLINE(1351)			 ::openfl::display::Graphics gfx = ::flixel::util::FlxSpriteUtil_obj::flashGfx;
HXLINE(1352)			gfx->clear();
HXLINE(1353)			gfx->moveTo(( (Float)(0) ),( (Float)(0) ));
HXLINE(1354)			gfx->lineStyle(1,color,((Float)0.5),null(),null(),null(),null(),null());
HXLINE(1355)			gfx->lineTo(( (Float)((this->tileWidth - 1)) ),( (Float)(0) ));
HXLINE(1356)			gfx->lineTo(( (Float)((this->tileWidth - 1)) ),( (Float)((this->tileHeight - 1)) ));
HXLINE(1357)			gfx->lineTo(( (Float)(0) ),( (Float)((this->tileHeight - 1)) ));
HXLINE(1358)			gfx->lineTo(( (Float)(0) ),( (Float)(0) ));
HXLINE(1360)			debugTile->draw(::flixel::util::FlxSpriteUtil_obj::flashGfxSprite,null(),null(),null(),null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxTilemap_obj,drawDebugTile,(void))

void FlxTilemap_obj::onDrawDebugChanged(){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1366_onDrawDebugChanged)
HXDLIN(1366)		this->setDirty(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTilemap_obj,onDrawDebugChanged,(void))

void FlxTilemap_obj::updateTile(int index){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1376_updateTile)
HXLINE(1377)		 ::flixel::tile::FlxTile tile = Dynamic( this->_tileObjects->__get(index)).StaticCast<  ::flixel::tile::FlxTile >();
HXLINE(1378)		bool _hx_tmp;
HXDLIN(1378)		if (::hx::IsNotNull( tile )) {
HXLINE(1378)			_hx_tmp = !(tile->visible);
            		}
            		else {
HXLINE(1378)			_hx_tmp = true;
            		}
HXDLIN(1378)		if (_hx_tmp) {
HXLINE(1379)			return;
            		}
HXLINE(1381)		tile->frame = this->frames->frames->__get((index - this->_startingIndex)).StaticCast<  ::flixel::graphics::frames::FlxFrame >();
            	}


 ::flixel::tile::FlxTilemapBuffer FlxTilemap_obj::createBuffer( ::flixel::FlxCamera camera){
            	HX_GC_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1385_createBuffer)
HXLINE(1386)		 ::flixel::tile::FlxTilemapBuffer buffer =  ::flixel::tile::FlxTilemapBuffer_obj::__alloc( HX_CTX ,this->tileWidth,this->tileHeight,this->widthInTiles,this->heightInTiles,camera,this->scale->x,this->scale->y);
HXLINE(1387)		buffer->pixelPerfectRender = this->pixelPerfectRender;
HXLINE(1388)		buffer->antialiasing = this->antialiasing;
HXLINE(1389)		return buffer;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,createBuffer,return )

bool FlxTilemap_obj::set_antialiasing(bool value){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1393_set_antialiasing)
HXLINE(1394)		{
HXLINE(1394)			int _g = 0;
HXDLIN(1394)			::Array< ::Dynamic> _g1 = this->_buffers;
HXDLIN(1394)			while((_g < _g1->length)){
HXLINE(1394)				 ::flixel::tile::FlxTilemapBuffer buffer = _g1->__get(_g).StaticCast<  ::flixel::tile::FlxTilemapBuffer >();
HXDLIN(1394)				_g = (_g + 1);
HXLINE(1395)				buffer->antialiasing = value;
            			}
            		}
HXLINE(1396)		return (this->antialiasing = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,set_antialiasing,return )

 ::flixel::graphics::FlxGraphic FlxTilemap_obj::set_graphic( ::flixel::graphics::FlxGraphic value){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1404_set_graphic)
HXLINE(1406)		if (::hx::IsInstanceNotEq( this->graphic,value )) {
HXLINE(1409)			if (::hx::IsNotNull( value )) {
HXLINE(1410)				value->set_useCount((value->get_useCount() + 1));
            			}
HXLINE(1413)			if (::hx::IsNotNull( this->graphic )) {
HXLINE(1414)				 ::flixel::graphics::FlxGraphic fh = this->graphic;
HXDLIN(1414)				fh->set_useCount((fh->get_useCount() - 1));
            			}
            		}
HXLINE(1417)		return (this->graphic = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,set_graphic,return )

bool FlxTilemap_obj::set_pixelPerfectRender(bool value){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1421_set_pixelPerfectRender)
HXLINE(1422)		if (::hx::IsNotNull( this->_buffers )) {
HXLINE(1423)			int _g = 0;
HXDLIN(1423)			::Array< ::Dynamic> _g1 = this->_buffers;
HXDLIN(1423)			while((_g < _g1->length)){
HXLINE(1423)				 ::flixel::tile::FlxTilemapBuffer buffer = _g1->__get(_g).StaticCast<  ::flixel::tile::FlxTilemapBuffer >();
HXDLIN(1423)				_g = (_g + 1);
HXLINE(1424)				buffer->pixelPerfectRender = value;
            			}
            		}
HXLINE(1426)		return ( (bool)((this->pixelPerfectRender = value)) );
            	}


Float FlxTilemap_obj::set_alpha(Float value){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1430_set_alpha)
HXLINE(1431)		Float lowerBound;
HXDLIN(1431)		if ((value < 0)) {
HXLINE(1431)			lowerBound = ( (Float)(0) );
            		}
            		else {
HXLINE(1431)			lowerBound = value;
            		}
HXDLIN(1431)		Float _hx_tmp;
HXDLIN(1431)		if ((lowerBound > 1)) {
HXLINE(1431)			_hx_tmp = ( (Float)(1) );
            		}
            		else {
HXLINE(1431)			_hx_tmp = lowerBound;
            		}
HXDLIN(1431)		this->alpha = _hx_tmp;
HXLINE(1432)		this->updateColorTransform();
HXLINE(1433)		return this->alpha;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,set_alpha,return )

int FlxTilemap_obj::set_color(int value){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1437_set_color)
HXLINE(1438)		if ((this->color == value)) {
HXLINE(1439)			return value;
            		}
HXLINE(1441)		this->color = value;
HXLINE(1442)		this->updateColorTransform();
HXLINE(1443)		return this->color;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,set_color,return )

void FlxTilemap_obj::updateColorTransform(){
            	HX_GC_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1447_updateColorTransform)
HXLINE(1448)		if (::hx::IsNull( this->colorTransform )) {
HXLINE(1449)			this->colorTransform =  ::openfl::geom::ColorTransform_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null(),null(),null(),null());
            		}
HXLINE(1451)		bool _hx_tmp;
HXDLIN(1451)		if ((this->alpha == 1)) {
HXLINE(1451)			_hx_tmp = (this->color != 16777215);
            		}
            		else {
HXLINE(1451)			_hx_tmp = true;
            		}
HXDLIN(1451)		if (_hx_tmp) {
HXLINE(1452)			::flixel::util::FlxColorTransformUtil_obj::setMultipliers(this->colorTransform,(( (Float)(((this->color >> 16) & 255)) ) / ( (Float)(255) )),(( (Float)(((this->color >> 8) & 255)) ) / ( (Float)(255) )),(( (Float)((this->color & 255)) ) / ( (Float)(255) )),this->alpha);
            		}
            		else {
HXLINE(1454)			::flixel::util::FlxColorTransformUtil_obj::setMultipliers(this->colorTransform,( (Float)(1) ),( (Float)(1) ),( (Float)(1) ),( (Float)(1) ));
            		}
HXLINE(1456)		this->setDirty(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTilemap_obj,updateColorTransform,(void))

 ::Dynamic FlxTilemap_obj::set_blend( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1460_set_blend)
HXLINE(1461)		this->setDirty(null());
HXLINE(1462)		return (this->blend = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,set_blend,return )

void FlxTilemap_obj::setScaleXYCallback( ::flixel::math::FlxBasePoint scale){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1466_setScaleXYCallback)
HXLINE(1467)		this->setScaleXCallback(scale);
HXLINE(1468)		this->setScaleYCallback(scale);
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,setScaleXYCallback,(void))

void FlxTilemap_obj::setScaleXCallback( ::flixel::math::FlxBasePoint scale){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1472_setScaleXCallback)
HXLINE(1473)		this->scaledTileWidth = (( (Float)(this->tileWidth) ) * scale->x);
HXLINE(1474)		this->set_width((( (Float)(this->widthInTiles) ) * this->scaledTileWidth));
HXLINE(1476)		if (::hx::IsNull( this->get_cameras() )) {
HXLINE(1477)			return;
            		}
HXLINE(1479)		{
HXLINE(1479)			int _g = 0;
HXDLIN(1479)			int _g1 = this->get_cameras()->length;
HXDLIN(1479)			while((_g < _g1)){
HXLINE(1479)				_g = (_g + 1);
HXDLIN(1479)				int i = (_g - 1);
HXLINE(1480)				if (::hx::IsNotNull( this->_buffers->__get(i).StaticCast<  ::flixel::tile::FlxTilemapBuffer >() )) {
HXLINE(1481)					 ::flixel::tile::FlxTilemapBuffer _hx_tmp = this->_buffers->__get(i).StaticCast<  ::flixel::tile::FlxTilemapBuffer >();
HXDLIN(1481)					int _hx_tmp1 = this->tileWidth;
HXDLIN(1481)					int _hx_tmp2 = this->widthInTiles;
HXDLIN(1481)					Float scale1 = scale->x;
HXDLIN(1481)					_hx_tmp->updateColumns(_hx_tmp1,_hx_tmp2,scale1,this->get_cameras()->__get(i).StaticCast<  ::flixel::FlxCamera >());
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,setScaleXCallback,(void))

void FlxTilemap_obj::setScaleYCallback( ::flixel::math::FlxBasePoint scale){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1485_setScaleYCallback)
HXLINE(1486)		this->scaledTileHeight = (( (Float)(this->tileHeight) ) * scale->y);
HXLINE(1487)		this->set_height((( (Float)(this->heightInTiles) ) * this->scaledTileHeight));
HXLINE(1489)		if (::hx::IsNull( this->get_cameras() )) {
HXLINE(1490)			return;
            		}
HXLINE(1492)		{
HXLINE(1492)			int _g = 0;
HXDLIN(1492)			int _g1 = this->get_cameras()->length;
HXDLIN(1492)			while((_g < _g1)){
HXLINE(1492)				_g = (_g + 1);
HXDLIN(1492)				int i = (_g - 1);
HXLINE(1493)				if (::hx::IsNotNull( this->_buffers->__get(i).StaticCast<  ::flixel::tile::FlxTilemapBuffer >() )) {
HXLINE(1494)					 ::flixel::tile::FlxTilemapBuffer _hx_tmp = this->_buffers->__get(i).StaticCast<  ::flixel::tile::FlxTilemapBuffer >();
HXDLIN(1494)					int _hx_tmp1 = this->tileHeight;
HXDLIN(1494)					int _hx_tmp2 = this->heightInTiles;
HXDLIN(1494)					Float scale1 = scale->y;
HXDLIN(1494)					_hx_tmp->updateRows(_hx_tmp1,_hx_tmp2,scale1,this->get_cameras()->__get(i).StaticCast<  ::flixel::FlxCamera >());
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,setScaleYCallback,(void))

 ::flixel::FlxSprite FlxTilemap_obj::defaultTileToSprite( ::Dynamic tileProperties){
            	HX_GC_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1504_defaultTileToSprite)
HXLINE(1505)		 ::flixel::FlxSprite tileSprite =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,tileProperties->__Field(HX_("x",78,00,00,00),::hx::paccDynamic),tileProperties->__Field(HX_("y",79,00,00,00),::hx::paccDynamic),null());
HXLINE(1506)		tileSprite->set_frames(( ( ::flixel::graphics::frames::FlxFramesCollection)(tileProperties->__Field(HX_("graphic",a8,5a,07,74),::hx::paccDynamic)) ));
HXLINE(1507)		{
HXLINE(1507)			 ::flixel::math::FlxBasePoint this1 = tileSprite->scale;
HXDLIN(1507)			 ::flixel::math::FlxBasePoint p = ( ( ::flixel::math::FlxBasePoint)(tileProperties->__Field(HX_("scale",8a,ce,ce,78),::hx::paccDynamic)) );
HXDLIN(1507)			{
HXLINE(1507)				Float y = p->y;
HXDLIN(1507)				this1->set_x(p->x);
HXDLIN(1507)				this1->set_y(y);
            			}
HXDLIN(1507)			if (p->_weak) {
HXLINE(1507)				p->put();
            			}
            		}
HXLINE(1508)		tileProperties->__SetField(HX_("scale",8a,ce,ce,78),::flixel::util::FlxDestroyUtil_obj::put( ::Dynamic(tileProperties->__Field(HX_("scale",8a,ce,ce,78),::hx::paccDynamic))),::hx::paccDynamic);
HXLINE(1509)		tileSprite->set_alpha(( (Float)(tileProperties->__Field(HX_("alpha",5e,a7,96,21),::hx::paccDynamic)) ));
HXLINE(1510)		tileSprite->set_blend(tileProperties->__Field(HX_("blend",51,e8,f4,b4),::hx::paccDynamic));
HXLINE(1511)		return tileSprite;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxTilemap_obj,defaultTileToSprite,return )

int FlxTilemap_obj::set_allowCollisions(int _tmp_value){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1515_set_allowCollisions)
HXLINE(1516)		int value = _tmp_value;
HXDLIN(1516)		{
HXLINE(1516)			int _g = 0;
HXDLIN(1516)			::Array< ::Dynamic> _g1 = this->_tileObjects;
HXDLIN(1516)			while((_g < _g1->length)){
HXLINE(1516)				 ::flixel::tile::FlxTile tile = _g1->__get(_g).StaticCast<  ::flixel::tile::FlxTile >();
HXDLIN(1516)				_g = (_g + 1);
HXLINE(1517)				if ((tile->index >= this->_collideIndex)) {
HXLINE(1518)					tile->set_allowCollisions(value);
            				}
            			}
            		}
HXLINE(1520)		return this->super::set_allowCollisions(value);
            	}


Float FlxTilemap_obj::get_scaledWidth(){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1525_get_scaledWidth)
HXDLIN(1525)		return (( (Float)(this->widthInTiles) ) * this->scaledTileWidth);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTilemap_obj,get_scaledWidth,return )

Float FlxTilemap_obj::get_scaledHeight(){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1530_get_scaledHeight)
HXDLIN(1530)		return (( (Float)(this->heightInTiles) ) * this->scaledTileHeight);
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxTilemap_obj,get_scaledHeight,return )

 ::flixel::math::FlxRect FlxTilemap_obj::getBounds( ::flixel::math::FlxRect bounds){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1540_getBounds)
HXLINE(1541)		if (::hx::IsNull( bounds )) {
HXLINE(1542)			 ::flixel::math::FlxRect _this = ::flixel::math::FlxRect_obj::_pool->get();
HXDLIN(1542)			_this->x = ( (Float)(0) );
HXDLIN(1542)			_this->y = ( (Float)(0) );
HXDLIN(1542)			_this->width = ( (Float)(0) );
HXDLIN(1542)			_this->height = ( (Float)(0) );
HXDLIN(1542)			 ::flixel::math::FlxRect rect = _this;
HXDLIN(1542)			rect->_inPool = false;
HXDLIN(1542)			bounds = rect;
            		}
HXLINE(1544)		bounds->x = this->x;
HXDLIN(1544)		bounds->y = this->y;
HXDLIN(1544)		bounds->width = (( (Float)(this->widthInTiles) ) * this->scaledTileWidth);
HXDLIN(1544)		bounds->height = (( (Float)(this->heightInTiles) ) * this->scaledTileHeight);
HXDLIN(1544)		return bounds;
            	}


int FlxTilemap_obj::set_debugBoundingBoxColorSolid(int color){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1549_set_debugBoundingBoxColorSolid)
HXLINE(1550)		this->super::set_debugBoundingBoxColorSolid(color);
HXLINE(1551)		this->updateDebugTileBoundingBoxSolid();
HXLINE(1552)		return color;
            	}


int FlxTilemap_obj::set_debugBoundingBoxColorNotSolid(int color){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1556_set_debugBoundingBoxColorNotSolid)
HXLINE(1557)		this->super::set_debugBoundingBoxColorNotSolid(color);
HXLINE(1558)		this->updateDebugTileBoundingBoxNotSolid();
HXLINE(1559)		return color;
            	}


int FlxTilemap_obj::set_debugBoundingBoxColorPartial(int color){
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_1563_set_debugBoundingBoxColorPartial)
HXLINE(1564)		this->super::set_debugBoundingBoxColorPartial(color);
HXLINE(1565)		this->updateDebugTileBoundingBoxPartial();
HXLINE(1566)		return color;
            	}


int FlxTilemap_obj::defaultFramePadding;


::hx::ObjectPtr< FlxTilemap_obj > FlxTilemap_obj::__new() {
	::hx::ObjectPtr< FlxTilemap_obj > __this = new FlxTilemap_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< FlxTilemap_obj > FlxTilemap_obj::__alloc(::hx::Ctx *_hx_ctx) {
	FlxTilemap_obj *__this = (FlxTilemap_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FlxTilemap_obj), true, "flixel.tile.FlxTilemap"));
	*(void **)__this = FlxTilemap_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FlxTilemap_obj::FlxTilemap_obj()
{
}

void FlxTilemap_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxTilemap);
	HX_MARK_MEMBER_NAME(useScaleHack,"useScaleHack");
	HX_MARK_MEMBER_NAME(scale,"scale");
	HX_MARK_MEMBER_NAME(antialiasing,"antialiasing");
	HX_MARK_MEMBER_NAME(offset,"offset");
	HX_MARK_MEMBER_NAME(frames,"frames");
	HX_MARK_MEMBER_NAME(graphic,"graphic");
	HX_MARK_MEMBER_NAME(color,"color");
	HX_MARK_MEMBER_NAME(alpha,"alpha");
	HX_MARK_MEMBER_NAME(colorTransform,"colorTransform");
	HX_MARK_MEMBER_NAME(blend,"blend");
	HX_MARK_MEMBER_NAME(tileWidth,"tileWidth");
	HX_MARK_MEMBER_NAME(tileHeight,"tileHeight");
	HX_MARK_MEMBER_NAME(scaledTileWidth,"scaledTileWidth");
	HX_MARK_MEMBER_NAME(scaledTileHeight,"scaledTileHeight");
	HX_MARK_MEMBER_NAME(shader,"shader");
	HX_MARK_MEMBER_NAME(_flashPoint,"_flashPoint");
	HX_MARK_MEMBER_NAME(_flashRect,"_flashRect");
	HX_MARK_MEMBER_NAME(_buffers,"_buffers");
	HX_MARK_MEMBER_NAME(_debugTileNotSolid,"_debugTileNotSolid");
	HX_MARK_MEMBER_NAME(_debugTilePartial,"_debugTilePartial");
	HX_MARK_MEMBER_NAME(_debugTileSolid,"_debugTileSolid");
	HX_MARK_MEMBER_NAME(_debugRect,"_debugRect");
	HX_MARK_MEMBER_NAME(_helperPoint,"_helperPoint");
	HX_MARK_MEMBER_NAME(_matrix,"_matrix");
	HX_MARK_MEMBER_NAME(_checkBufferChanges,"_checkBufferChanges");
	 ::flixel::tile::FlxBaseTilemap_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void FlxTilemap_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(useScaleHack,"useScaleHack");
	HX_VISIT_MEMBER_NAME(scale,"scale");
	HX_VISIT_MEMBER_NAME(antialiasing,"antialiasing");
	HX_VISIT_MEMBER_NAME(offset,"offset");
	HX_VISIT_MEMBER_NAME(frames,"frames");
	HX_VISIT_MEMBER_NAME(graphic,"graphic");
	HX_VISIT_MEMBER_NAME(color,"color");
	HX_VISIT_MEMBER_NAME(alpha,"alpha");
	HX_VISIT_MEMBER_NAME(colorTransform,"colorTransform");
	HX_VISIT_MEMBER_NAME(blend,"blend");
	HX_VISIT_MEMBER_NAME(tileWidth,"tileWidth");
	HX_VISIT_MEMBER_NAME(tileHeight,"tileHeight");
	HX_VISIT_MEMBER_NAME(scaledTileWidth,"scaledTileWidth");
	HX_VISIT_MEMBER_NAME(scaledTileHeight,"scaledTileHeight");
	HX_VISIT_MEMBER_NAME(shader,"shader");
	HX_VISIT_MEMBER_NAME(_flashPoint,"_flashPoint");
	HX_VISIT_MEMBER_NAME(_flashRect,"_flashRect");
	HX_VISIT_MEMBER_NAME(_buffers,"_buffers");
	HX_VISIT_MEMBER_NAME(_debugTileNotSolid,"_debugTileNotSolid");
	HX_VISIT_MEMBER_NAME(_debugTilePartial,"_debugTilePartial");
	HX_VISIT_MEMBER_NAME(_debugTileSolid,"_debugTileSolid");
	HX_VISIT_MEMBER_NAME(_debugRect,"_debugRect");
	HX_VISIT_MEMBER_NAME(_helperPoint,"_helperPoint");
	HX_VISIT_MEMBER_NAME(_matrix,"_matrix");
	HX_VISIT_MEMBER_NAME(_checkBufferChanges,"_checkBufferChanges");
	 ::flixel::tile::FlxBaseTilemap_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val FlxTilemap_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ray") ) { return ::hx::Val( ray_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return ::hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { return ::hx::Val( scale ); }
		if (HX_FIELD_EQ(inName,"color") ) { return ::hx::Val( color ); }
		if (HX_FIELD_EQ(inName,"alpha") ) { return ::hx::Val( alpha ); }
		if (HX_FIELD_EQ(inName,"blend") ) { return ::hx::Val( blend ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"offset") ) { return ::hx::Val( offset ); }
		if (HX_FIELD_EQ(inName,"frames") ) { return ::hx::Val( frames ); }
		if (HX_FIELD_EQ(inName,"shader") ) { return ::hx::Val( shader ); }
		if (HX_FIELD_EQ(inName,"follow") ) { return ::hx::Val( follow_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"graphic") ) { return ::hx::Val( graphic ); }
		if (HX_FIELD_EQ(inName,"_matrix") ) { return ::hx::Val( _matrix ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		if (HX_FIELD_EQ(inName,"rayStep") ) { return ::hx::Val( rayStep_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_buffers") ) { return ::hx::Val( _buffers ); }
		if (HX_FIELD_EQ(inName,"setDirty") ) { return ::hx::Val( setDirty_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"tileWidth") ) { return ::hx::Val( tileWidth ); }
		if (HX_FIELD_EQ(inName,"updateMap") ) { return ::hx::Val( updateMap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_alpha") ) { return ::hx::Val( set_alpha_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return ::hx::Val( set_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_blend") ) { return ::hx::Val( set_blend_dyn() ); }
		if (HX_FIELD_EQ(inName,"getBounds") ) { return ::hx::Val( getBounds_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"tileHeight") ) { return ::hx::Val( tileHeight ); }
		if (HX_FIELD_EQ(inName,"_flashRect") ) { return ::hx::Val( _flashRect ); }
		if (HX_FIELD_EQ(inName,"_debugRect") ) { return ::hx::Val( _debugRect ); }
		if (HX_FIELD_EQ(inName,"set_frames") ) { return ::hx::Val( set_frames_dyn() ); }
		if (HX_FIELD_EQ(inName,"isOnScreen") ) { return ::hx::Val( isOnScreen_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateTile") ) { return ::hx::Val( updateTile_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"scaledWidth") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_scaledWidth() ); }
		if (HX_FIELD_EQ(inName,"_flashPoint") ) { return ::hx::Val( _flashPoint ); }
		if (HX_FIELD_EQ(inName,"checkColumn") ) { return ::hx::Val( checkColumn_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawTilemap") ) { return ::hx::Val( drawTilemap_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_graphic") ) { return ::hx::Val( set_graphic_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"useScaleHack") ) { return ::hx::Val( useScaleHack ); }
		if (HX_FIELD_EQ(inName,"antialiasing") ) { return ::hx::Val( antialiasing ); }
		if (HX_FIELD_EQ(inName,"scaledHeight") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_scaledHeight() ); }
		if (HX_FIELD_EQ(inName,"_helperPoint") ) { return ::hx::Val( _helperPoint ); }
		if (HX_FIELD_EQ(inName,"tileToSprite") ) { return ::hx::Val( tileToSprite_dyn() ); }
		if (HX_FIELD_EQ(inName,"createBuffer") ) { return ::hx::Val( createBuffer_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"onGameResized") ) { return ::hx::Val( onGameResized_dyn() ); }
		if (HX_FIELD_EQ(inName,"cacheGraphics") ) { return ::hx::Val( cacheGraphics_dyn() ); }
		if (HX_FIELD_EQ(inName,"padTileFrames") ) { return ::hx::Val( padTileFrames_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTileCoords") ) { return ::hx::Val( getTileCoords_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateBuffers") ) { return ::hx::Val( updateBuffers_dyn() ); }
		if (HX_FIELD_EQ(inName,"makeDebugTile") ) { return ::hx::Val( makeDebugTile_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawDebugTile") ) { return ::hx::Val( drawDebugTile_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { return ::hx::Val( colorTransform ); }
		if (HX_FIELD_EQ(inName,"refreshBuffers") ) { return ::hx::Val( refreshBuffers_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"scaledTileWidth") ) { return ::hx::Val( scaledTileWidth ); }
		if (HX_FIELD_EQ(inName,"_debugTileSolid") ) { return ::hx::Val( _debugTileSolid ); }
		if (HX_FIELD_EQ(inName,"onCameraChanged") ) { return ::hx::Val( onCameraChanged_dyn() ); }
		if (HX_FIELD_EQ(inName,"initTileObjects") ) { return ::hx::Val( initTileObjects_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateDebugTile") ) { return ::hx::Val( updateDebugTile_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scaledWidth") ) { return ::hx::Val( get_scaledWidth_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"scaledTileHeight") ) { return ::hx::Val( scaledTileHeight ); }
		if (HX_FIELD_EQ(inName,"set_antialiasing") ) { return ::hx::Val( set_antialiasing_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_scaledHeight") ) { return ::hx::Val( get_scaledHeight_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_debugTilePartial") ) { return ::hx::Val( _debugTilePartial ); }
		if (HX_FIELD_EQ(inName,"computeDimensions") ) { return ::hx::Val( computeDimensions_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawDebugOnCamera") ) { return ::hx::Val( drawDebugOnCamera_dyn() ); }
		if (HX_FIELD_EQ(inName,"setScaleXCallback") ) { return ::hx::Val( setScaleXCallback_dyn() ); }
		if (HX_FIELD_EQ(inName,"setScaleYCallback") ) { return ::hx::Val( setScaleYCallback_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_debugTileNotSolid") ) { return ::hx::Val( _debugTileNotSolid ); }
		if (HX_FIELD_EQ(inName,"onDrawDebugChanged") ) { return ::hx::Val( onDrawDebugChanged_dyn() ); }
		if (HX_FIELD_EQ(inName,"setScaleXYCallback") ) { return ::hx::Val( setScaleXYCallback_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_checkBufferChanges") ) { return ::hx::Val( _checkBufferChanges ); }
		if (HX_FIELD_EQ(inName,"defaultTileToSprite") ) { return ::hx::Val( defaultTileToSprite_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_allowCollisions") ) { return ::hx::Val( set_allowCollisions_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"overlapsWithCallback") ) { return ::hx::Val( overlapsWithCallback_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTileIndexByCoords") ) { return ::hx::Val( getTileIndexByCoords_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTileCoordsByIndex") ) { return ::hx::Val( getTileCoordsByIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateColorTransform") ) { return ::hx::Val( updateColorTransform_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"set_pixelPerfectRender") ) { return ::hx::Val( set_pixelPerfectRender_dyn() ); }
		break;
	case 30:
		if (HX_FIELD_EQ(inName,"set_debugBoundingBoxColorSolid") ) { return ::hx::Val( set_debugBoundingBoxColorSolid_dyn() ); }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"updateDebugTileBoundingBoxSolid") ) { return ::hx::Val( updateDebugTileBoundingBoxSolid_dyn() ); }
		break;
	case 32:
		if (HX_FIELD_EQ(inName,"set_debugBoundingBoxColorPartial") ) { return ::hx::Val( set_debugBoundingBoxColorPartial_dyn() ); }
		break;
	case 33:
		if (HX_FIELD_EQ(inName,"updateDebugTileBoundingBoxPartial") ) { return ::hx::Val( updateDebugTileBoundingBoxPartial_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_debugBoundingBoxColorNotSolid") ) { return ::hx::Val( set_debugBoundingBoxColorNotSolid_dyn() ); }
		break;
	case 34:
		if (HX_FIELD_EQ(inName,"updateDebugTileBoundingBoxNotSolid") ) { return ::hx::Val( updateDebugTileBoundingBoxNotSolid_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxTilemap_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"defaultFramePadding") ) { outValue = ( defaultFramePadding ); return true; }
	}
	return false;
}

::hx::Val FlxTilemap_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"scale") ) { scale=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"color") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_color(inValue.Cast< int >()) );color=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"alpha") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_alpha(inValue.Cast< Float >()) );alpha=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"blend") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_blend(inValue.Cast<  ::Dynamic >()) );blend=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"offset") ) { offset=inValue.Cast<  ::flixel::math::FlxBasePoint >(); return inValue; }
		if (HX_FIELD_EQ(inName,"frames") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_frames(inValue.Cast<  ::flixel::graphics::frames::FlxFramesCollection >()) );frames=inValue.Cast<  ::flixel::graphics::frames::FlxFramesCollection >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shader") ) { shader=inValue.Cast<  ::flixel::graphics::tile::FlxGraphicsShader >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"graphic") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_graphic(inValue.Cast<  ::flixel::graphics::FlxGraphic >()) );graphic=inValue.Cast<  ::flixel::graphics::FlxGraphic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_matrix") ) { _matrix=inValue.Cast<  ::flixel::math::FlxMatrix >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_buffers") ) { _buffers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"tileWidth") ) { tileWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"tileHeight") ) { tileHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_flashRect") ) { _flashRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_debugRect") ) { _debugRect=inValue.Cast<  ::openfl::geom::Rectangle >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_flashPoint") ) { _flashPoint=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"useScaleHack") ) { useScaleHack=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"antialiasing") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set_antialiasing(inValue.Cast< bool >()) );antialiasing=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_helperPoint") ) { _helperPoint=inValue.Cast<  ::openfl::geom::Point >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"colorTransform") ) { colorTransform=inValue.Cast<  ::openfl::geom::ColorTransform >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"scaledTileWidth") ) { scaledTileWidth=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_debugTileSolid") ) { _debugTileSolid=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"scaledTileHeight") ) { scaledTileHeight=inValue.Cast< Float >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_debugTilePartial") ) { _debugTilePartial=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"_debugTileNotSolid") ) { _debugTileNotSolid=inValue.Cast<  ::openfl::display::BitmapData >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_checkBufferChanges") ) { _checkBufferChanges=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool FlxTilemap_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 19:
		if (HX_FIELD_EQ(inName,"defaultFramePadding") ) { defaultFramePadding=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void FlxTilemap_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("useScaleHack",44,9c,16,98));
	outFields->push(HX_("scale",8a,ce,ce,78));
	outFields->push(HX_("antialiasing",f4,16,b3,48));
	outFields->push(HX_("offset",93,97,3f,60));
	outFields->push(HX_("frames",a6,af,85,ac));
	outFields->push(HX_("graphic",a8,5a,07,74));
	outFields->push(HX_("color",63,71,5c,4a));
	outFields->push(HX_("alpha",5e,a7,96,21));
	outFields->push(HX_("colorTransform",89,d7,3f,ad));
	outFields->push(HX_("blend",51,e8,f4,b4));
	outFields->push(HX_("tileWidth",f8,13,be,55));
	outFields->push(HX_("tileHeight",b5,dd,e2,66));
	outFields->push(HX_("scaledTileWidth",fe,e5,29,4d));
	outFields->push(HX_("scaledTileHeight",ef,d0,ce,ed));
	outFields->push(HX_("scaledWidth",0c,8d,af,10));
	outFields->push(HX_("scaledHeight",21,56,3b,3f));
	outFields->push(HX_("shader",25,bf,20,1d));
	outFields->push(HX_("_flashPoint",9f,1d,2a,b7));
	outFields->push(HX_("_flashRect",b5,c2,f3,5d));
	outFields->push(HX_("_buffers",f4,fc,48,eb));
	outFields->push(HX_("_debugTileNotSolid",1a,df,89,53));
	outFields->push(HX_("_debugTilePartial",bf,14,2d,78));
	outFields->push(HX_("_debugTileSolid",e9,85,df,f6));
	outFields->push(HX_("_debugRect",d8,6c,95,8a));
	outFields->push(HX_("_helperPoint",03,e6,14,f8));
	outFields->push(HX_("_matrix",e0,47,3f,2a));
	outFields->push(HX_("_checkBufferChanges",1a,1a,89,0b));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FlxTilemap_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(FlxTilemap_obj,useScaleHack),HX_("useScaleHack",44,9c,16,98)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(FlxTilemap_obj,scale),HX_("scale",8a,ce,ce,78)},
	{::hx::fsBool,(int)offsetof(FlxTilemap_obj,antialiasing),HX_("antialiasing",f4,16,b3,48)},
	{::hx::fsObject /*  ::flixel::math::FlxBasePoint */ ,(int)offsetof(FlxTilemap_obj,offset),HX_("offset",93,97,3f,60)},
	{::hx::fsObject /*  ::flixel::graphics::frames::FlxFramesCollection */ ,(int)offsetof(FlxTilemap_obj,frames),HX_("frames",a6,af,85,ac)},
	{::hx::fsObject /*  ::flixel::graphics::FlxGraphic */ ,(int)offsetof(FlxTilemap_obj,graphic),HX_("graphic",a8,5a,07,74)},
	{::hx::fsInt,(int)offsetof(FlxTilemap_obj,color),HX_("color",63,71,5c,4a)},
	{::hx::fsFloat,(int)offsetof(FlxTilemap_obj,alpha),HX_("alpha",5e,a7,96,21)},
	{::hx::fsObject /*  ::openfl::geom::ColorTransform */ ,(int)offsetof(FlxTilemap_obj,colorTransform),HX_("colorTransform",89,d7,3f,ad)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(FlxTilemap_obj,blend),HX_("blend",51,e8,f4,b4)},
	{::hx::fsInt,(int)offsetof(FlxTilemap_obj,tileWidth),HX_("tileWidth",f8,13,be,55)},
	{::hx::fsInt,(int)offsetof(FlxTilemap_obj,tileHeight),HX_("tileHeight",b5,dd,e2,66)},
	{::hx::fsFloat,(int)offsetof(FlxTilemap_obj,scaledTileWidth),HX_("scaledTileWidth",fe,e5,29,4d)},
	{::hx::fsFloat,(int)offsetof(FlxTilemap_obj,scaledTileHeight),HX_("scaledTileHeight",ef,d0,ce,ed)},
	{::hx::fsObject /*  ::flixel::graphics::tile::FlxGraphicsShader */ ,(int)offsetof(FlxTilemap_obj,shader),HX_("shader",25,bf,20,1d)},
	{::hx::fsObject /*  ::openfl::geom::Point */ ,(int)offsetof(FlxTilemap_obj,_flashPoint),HX_("_flashPoint",9f,1d,2a,b7)},
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(FlxTilemap_obj,_flashRect),HX_("_flashRect",b5,c2,f3,5d)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxTilemap_obj,_buffers),HX_("_buffers",f4,fc,48,eb)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(FlxTilemap_obj,_debugTileNotSolid),HX_("_debugTileNotSolid",1a,df,89,53)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(FlxTilemap_obj,_debugTilePartial),HX_("_debugTilePartial",bf,14,2d,78)},
	{::hx::fsObject /*  ::openfl::display::BitmapData */ ,(int)offsetof(FlxTilemap_obj,_debugTileSolid),HX_("_debugTileSolid",e9,85,df,f6)},
	{::hx::fsObject /*  ::openfl::geom::Rectangle */ ,(int)offsetof(FlxTilemap_obj,_debugRect),HX_("_debugRect",d8,6c,95,8a)},
	{::hx::fsObject /*  ::openfl::geom::Point */ ,(int)offsetof(FlxTilemap_obj,_helperPoint),HX_("_helperPoint",03,e6,14,f8)},
	{::hx::fsObject /*  ::flixel::math::FlxMatrix */ ,(int)offsetof(FlxTilemap_obj,_matrix),HX_("_matrix",e0,47,3f,2a)},
	{::hx::fsBool,(int)offsetof(FlxTilemap_obj,_checkBufferChanges),HX_("_checkBufferChanges",1a,1a,89,0b)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo FlxTilemap_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &FlxTilemap_obj::defaultFramePadding,HX_("defaultFramePadding",85,db,60,ed)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxTilemap_obj_sMemberFields[] = {
	HX_("useScaleHack",44,9c,16,98),
	HX_("scale",8a,ce,ce,78),
	HX_("antialiasing",f4,16,b3,48),
	HX_("offset",93,97,3f,60),
	HX_("frames",a6,af,85,ac),
	HX_("graphic",a8,5a,07,74),
	HX_("color",63,71,5c,4a),
	HX_("alpha",5e,a7,96,21),
	HX_("colorTransform",89,d7,3f,ad),
	HX_("blend",51,e8,f4,b4),
	HX_("tileWidth",f8,13,be,55),
	HX_("tileHeight",b5,dd,e2,66),
	HX_("scaledTileWidth",fe,e5,29,4d),
	HX_("scaledTileHeight",ef,d0,ce,ed),
	HX_("shader",25,bf,20,1d),
	HX_("_flashPoint",9f,1d,2a,b7),
	HX_("_flashRect",b5,c2,f3,5d),
	HX_("_buffers",f4,fc,48,eb),
	HX_("_debugTileNotSolid",1a,df,89,53),
	HX_("_debugTilePartial",bf,14,2d,78),
	HX_("_debugTileSolid",e9,85,df,f6),
	HX_("_debugRect",d8,6c,95,8a),
	HX_("_helperPoint",03,e6,14,f8),
	HX_("_matrix",e0,47,3f,2a),
	HX_("_checkBufferChanges",1a,1a,89,0b),
	HX_("destroy",fa,2c,86,24),
	HX_("set_frames",e3,bd,8a,a0),
	HX_("onGameResized",3f,ef,13,ab),
	HX_("onCameraChanged",30,48,4e,5c),
	HX_("cacheGraphics",2d,61,95,fc),
	HX_("padTileFrames",a7,e0,6e,cc),
	HX_("initTileObjects",16,be,45,2e),
	HX_("updateDebugTileBoundingBoxSolid",9c,41,64,d8),
	HX_("updateDebugTileBoundingBoxNotSolid",47,35,bd,4d),
	HX_("updateDebugTileBoundingBoxPartial",32,63,1e,51),
	HX_("updateDebugTile",d8,3f,d3,7f),
	HX_("computeDimensions",a4,a4,eb,f3),
	HX_("updateMap",13,e8,df,82),
	HX_("drawDebugOnCamera",f3,47,7b,cb),
	HX_("isOnScreen",f5,43,b9,a1),
	HX_("draw",04,2c,70,42),
	HX_("refreshBuffers",d8,b2,a5,26),
	HX_("setDirty",10,b9,04,e8),
	HX_("overlapsWithCallback",17,c3,72,a8),
	HX_("getTileIndexByCoords",03,79,8b,76),
	HX_("getTileCoordsByIndex",b9,63,25,a1),
	HX_("getTileCoords",22,d6,8d,89),
	HX_("follow",71,91,96,f9),
	HX_("ray",ea,d5,56,00),
	HX_("checkColumn",be,21,9d,a8),
	HX_("rayStep",56,26,de,2f),
	HX_("tileToSprite",2e,e9,26,c3),
	HX_("updateBuffers",6a,08,ff,7c),
	HX_("drawTilemap",8a,34,d7,8e),
	HX_("makeDebugTile",53,67,f1,28),
	HX_("drawDebugTile",7d,82,6f,8f),
	HX_("onDrawDebugChanged",44,e0,f1,9f),
	HX_("updateTile",d7,b5,b1,05),
	HX_("createBuffer",1c,fd,e9,f2),
	HX_("set_antialiasing",f1,f0,93,a3),
	HX_("set_graphic",cb,c1,6e,04),
	HX_("set_pixelPerfectRender",9a,4f,8f,bc),
	HX_("set_alpha",c1,ef,90,48),
	HX_("set_color",c6,b9,56,71),
	HX_("updateColorTransform",72,0f,d2,2f),
	HX_("set_blend",b4,30,ef,db),
	HX_("setScaleXYCallback",6e,fd,35,90),
	HX_("setScaleXCallback",b5,05,a2,03),
	HX_("setScaleYCallback",b6,6e,93,d6),
	HX_("defaultTileToSprite",8f,ab,7f,3f),
	HX_("set_allowCollisions",cd,8b,81,21),
	HX_("get_scaledWidth",a3,44,91,d1),
	HX_("get_scaledHeight",aa,42,da,43),
	HX_("getBounds",ab,0f,74,e2),
	HX_("set_debugBoundingBoxColorSolid",19,c9,0b,4b),
	HX_("set_debugBoundingBoxColorNotSolid",ea,b9,e3,4b),
	HX_("set_debugBoundingBoxColorPartial",ef,83,54,62),
	::String(null()) };

static void FlxTilemap_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxTilemap_obj::defaultFramePadding,"defaultFramePadding");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxTilemap_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxTilemap_obj::defaultFramePadding,"defaultFramePadding");
};

#endif

::hx::Class FlxTilemap_obj::__mClass;

static ::String FlxTilemap_obj_sStaticFields[] = {
	HX_("defaultFramePadding",85,db,60,ed),
	::String(null())
};

void FlxTilemap_obj::__register()
{
	FlxTilemap_obj _hx_dummy;
	FlxTilemap_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("flixel.tile.FlxTilemap",2a,d5,63,29);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxTilemap_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxTilemap_obj::__SetStatic;
	__mClass->mMarkFunc = FlxTilemap_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(FlxTilemap_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FlxTilemap_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FlxTilemap_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxTilemap_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxTilemap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxTilemap_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxTilemap_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_1146cbfc6764fb25_114_boot)
HXDLIN( 114)		defaultFramePadding = 2;
            	}
}

} // end namespace flixel
} // end namespace tile
