// Generated by Haxe 4.3.1
#ifndef INCLUDED_arg_objects_NoteDisplay
#define INCLUDED_arg_objects_NoteDisplay

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
HX_DECLARE_CLASS2(arg,objects,NoteDisplay)
HX_DECLARE_CLASS3(flixel,graphics,tile,FlxGraphicsShader)
HX_DECLARE_CLASS2(openfl,display,GraphicsShader)
HX_DECLARE_CLASS2(openfl,display,Shader)

namespace arg{
namespace objects{


class HXCPP_CLASS_ATTRIBUTES NoteDisplay_obj : public  ::flixel::graphics::tile::FlxGraphicsShader_obj
{
	public:
		typedef  ::flixel::graphics::tile::FlxGraphicsShader_obj super;
		typedef NoteDisplay_obj OBJ_;
		NoteDisplay_obj();

	public:
		enum { _hx_ClassId = 0x626a3d2e };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="arg.objects.NoteDisplay")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"arg.objects.NoteDisplay"); }
		static ::hx::ObjectPtr< NoteDisplay_obj > __new();
		static ::hx::ObjectPtr< NoteDisplay_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~NoteDisplay_obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("NoteDisplay",50,94,f4,52); }

};

} // end namespace arg
} // end namespace objects

#endif /* INCLUDED_arg_objects_NoteDisplay */ 
