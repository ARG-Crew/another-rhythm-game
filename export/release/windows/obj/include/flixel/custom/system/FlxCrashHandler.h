// Generated by Haxe 4.2.0
#ifndef INCLUDED_flixel_custom_system_FlxCrashHandler
#define INCLUDED_flixel_custom_system_FlxCrashHandler

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
HX_DECLARE_CLASS3(flixel,custom,_hx_system,FlxCrashHandler)
HX_DECLARE_CLASS2(openfl,display,DisplayObject)
HX_DECLARE_CLASS2(openfl,display,DisplayObjectContainer)
HX_DECLARE_CLASS2(openfl,display,IBitmapDrawable)
HX_DECLARE_CLASS2(openfl,display,InteractiveObject)
HX_DECLARE_CLASS2(openfl,display,Sprite)
HX_DECLARE_CLASS2(openfl,events,ErrorEvent)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)
HX_DECLARE_CLASS2(openfl,events,TextEvent)
HX_DECLARE_CLASS2(openfl,events,UncaughtErrorEvent)

namespace flixel{
namespace custom{
namespace _hx_system{


class HXCPP_CLASS_ATTRIBUTES FlxCrashHandler_obj : public  ::openfl::display::Sprite_obj
{
	public:
		typedef  ::openfl::display::Sprite_obj super;
		typedef FlxCrashHandler_obj OBJ_;
		FlxCrashHandler_obj();

	public:
		enum { _hx_ClassId = 0x5ea19599 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.custom.system.FlxCrashHandler")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"flixel.custom.system.FlxCrashHandler"); }
		static ::hx::ObjectPtr< FlxCrashHandler_obj > __new();
		static ::hx::ObjectPtr< FlxCrashHandler_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~FlxCrashHandler_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("FlxCrashHandler",15,ee,9b,16); }

		void onCrash( ::openfl::events::UncaughtErrorEvent e);
		::Dynamic onCrash_dyn();

		::String format(::String string);
		::Dynamic format_dyn();

};

} // end namespace flixel
} // end namespace custom
} // end namespace system

#endif /* INCLUDED_flixel_custom_system_FlxCrashHandler */ 
