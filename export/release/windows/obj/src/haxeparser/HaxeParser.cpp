// Generated by Haxe 4.2.0
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxeparser_HaxeParser
#include <haxeparser/HaxeParser.h>
#endif
#ifndef INCLUDED_hscript_Expr
#include <hscript/Expr.h>
#endif
#ifndef INCLUDED_hscript_Interp
#include <hscript/Interp.h>
#endif
#ifndef INCLUDED_hscript_Parser
#include <hscript/Parser.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ad012f74e8a2eef6_38_new,"haxeparser.HaxeParser","new",0x4d5d1200,"haxeparser.HaxeParser.new","haxeparser/HaxeParser.hx",38,0xe69c80cf)
HX_DEFINE_STACK_FRAME(_hx_pos_ad012f74e8a2eef6_12_new,"haxeparser.HaxeParser","new",0x4d5d1200,"haxeparser.HaxeParser.new","haxeparser/HaxeParser.hx",12,0xe69c80cf)
HX_LOCAL_STACK_FRAME(_hx_pos_ad012f74e8a2eef6_19_get_variables,"haxeparser.HaxeParser","get_variables",0x9a4e402e,"haxeparser.HaxeParser.get_variables","haxeparser/HaxeParser.hx",19,0xe69c80cf)
HX_LOCAL_STACK_FRAME(_hx_pos_ad012f74e8a2eef6_51_callFunction,"haxeparser.HaxeParser","callFunction",0xad66d836,"haxeparser.HaxeParser.callFunction","haxeparser/HaxeParser.hx",51,0xe69c80cf)
HX_LOCAL_STACK_FRAME(_hx_pos_ad012f74e8a2eef6_74_addCallback,"haxeparser.HaxeParser","addCallback",0xd0f6b2a6,"haxeparser.HaxeParser.addCallback","haxeparser/HaxeParser.hx",74,0xe69c80cf)
HX_LOCAL_STACK_FRAME(_hx_pos_ad012f74e8a2eef6_14_boot,"haxeparser.HaxeParser","boot",0x5c2bae92,"haxeparser.HaxeParser.boot","haxeparser/HaxeParser.hx",14,0xe69c80cf)
namespace haxeparser{

void HaxeParser_obj::__construct(::String path){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::haxeparser::HaxeParser,_gthis) HXARGC(2)
            		void _hx_run(::String lib,::String like){
            			HX_GC_STACKFRAME(&_hx_pos_ad012f74e8a2eef6_38_new)
HXLINE(  39)			::Array< ::String > libPack = lib.split(HX_(".",2e,00,00,00));
HXLINE(  40)			::String libName = libPack->__get((libPack->length - 1));
HXLINE(  42)			bool _hx_tmp;
HXDLIN(  42)			if (::hx::IsNotNull( like )) {
HXLINE(  42)				_hx_tmp = (like != HX_("",00,00,00,00));
            			}
            			else {
HXLINE(  42)				_hx_tmp = false;
            			}
HXDLIN(  42)			if (_hx_tmp) {
HXLINE(  43)				libName = like;
            			}
HXLINE(  46)			 ::haxeparser::HaxeParser _gthis1 = _gthis;
HXDLIN(  46)			_gthis1->addCallback(libName,::Type_obj::resolveClass(lib));
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_GC_STACKFRAME(&_hx_pos_ad012f74e8a2eef6_12_new)
HXLINE(  15)		this->interp =  ::hscript::Interp_obj::__alloc( HX_CTX );
HXLINE(  23)		 ::haxeparser::HaxeParser _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  25)		::haxeparser::HaxeParser_obj::parser->line = 1;
HXLINE(  26)		::haxeparser::HaxeParser_obj::parser->allowTypes = true;
HXLINE(  28)		if (::sys::FileSystem_obj::exists(path)) {
HXLINE(  29)			 ::hscript::Interp _hx_tmp = this->interp;
HXDLIN(  29)			 ::hscript::Parser _hx_tmp1 = ::haxeparser::HaxeParser_obj::parser;
HXDLIN(  29)			_hx_tmp->execute(_hx_tmp1->parseString(::sys::io::File_obj::getContent(path),null()));
            		}
HXLINE(  35)		{
HXLINE(  35)			{
HXLINE(  35)				::String lib = HX_("StringTools",6a,db,63,03);
HXLINE(  36)				this->addCallback(lib,::Type_obj::resolveClass(lib));
            			}
HXLINE(  35)			{
HXLINE(  35)				::String lib1 = HX_("Std",83,60,3f,00);
HXLINE(  36)				this->addCallback(lib1,::Type_obj::resolveClass(lib1));
            			}
HXLINE(  35)			{
HXLINE(  35)				::String lib2 = HX_("Reflect",1d,ac,7a,b6);
HXLINE(  36)				this->addCallback(lib2,::Type_obj::resolveClass(lib2));
            			}
HXLINE(  35)			{
HXLINE(  35)				::String lib3 = HX_("Type",da,1e,e2,37);
HXLINE(  36)				this->addCallback(lib3,::Type_obj::resolveClass(lib3));
            			}
            		}
HXLINE(  38)		this->addCallback(HX_("import",65,a1,82,08), ::Dynamic(new _hx_Closure_0(_gthis)));
            	}

Dynamic HaxeParser_obj::__CreateEmpty() { return new HaxeParser_obj; }

void *HaxeParser_obj::_hx_vtable = 0;

Dynamic HaxeParser_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< HaxeParser_obj > _hx_result = new HaxeParser_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool HaxeParser_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3cfa744a;
}

 ::haxe::ds::StringMap HaxeParser_obj::get_variables(){
            	HX_STACKFRAME(&_hx_pos_ad012f74e8a2eef6_19_get_variables)
HXDLIN(  19)		return this->interp->variables;
            	}


HX_DEFINE_DYNAMIC_FUNC0(HaxeParser_obj,get_variables,return )

void HaxeParser_obj::callFunction(::String event,::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_ad012f74e8a2eef6_51_callFunction)
HXLINE(  52)		if (!(this->get_variables()->exists(event))) {
HXLINE(  53)			return;
            		}
HXLINE(  55)		 ::Dynamic method = this->get_variables()->get(event);
HXLINE(  56)		switch((int)(args->get_length())){
            			case (int)0: {
HXLINE(  59)				method();
            			}
            			break;
            			case (int)1: {
HXLINE(  61)				method(args->__get(0));
            			}
            			break;
            			case (int)2: {
HXLINE(  63)				method(args->__get(0),args->__get(1));
            			}
            			break;
            			case (int)3: {
HXLINE(  65)				method(args->__get(0),args->__get(1),args->__get(2));
            			}
            			break;
            			case (int)4: {
HXLINE(  67)				method(args->__get(0),args->__get(1),args->__get(2),args->__get(3));
            			}
            			break;
            			case (int)5: {
HXLINE(  69)				method(args->__get(0),args->__get(1),args->__get(2),args->__get(3),args->__get(4));
            			}
            			break;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(HaxeParser_obj,callFunction,(void))

void HaxeParser_obj::addCallback(::String name, ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_ad012f74e8a2eef6_74_addCallback)
HXDLIN(  74)		this->interp->variables->set(name,value);
            	}


HX_DEFINE_DYNAMIC_FUNC2(HaxeParser_obj,addCallback,(void))

 ::hscript::Parser HaxeParser_obj::parser;


::hx::ObjectPtr< HaxeParser_obj > HaxeParser_obj::__new(::String path) {
	::hx::ObjectPtr< HaxeParser_obj > __this = new HaxeParser_obj();
	__this->__construct(path);
	return __this;
}

::hx::ObjectPtr< HaxeParser_obj > HaxeParser_obj::__alloc(::hx::Ctx *_hx_ctx,::String path) {
	HaxeParser_obj *__this = (HaxeParser_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(HaxeParser_obj), true, "haxeparser.HaxeParser"));
	*(void **)__this = HaxeParser_obj::_hx_vtable;
	__this->__construct(path);
	return __this;
}

HaxeParser_obj::HaxeParser_obj()
{
}

void HaxeParser_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(HaxeParser);
	HX_MARK_MEMBER_NAME(interp,"interp");
	HX_MARK_END_CLASS();
}

void HaxeParser_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(interp,"interp");
}

::hx::Val HaxeParser_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"interp") ) { return ::hx::Val( interp ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"variables") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_variables() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"addCallback") ) { return ::hx::Val( addCallback_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"callFunction") ) { return ::hx::Val( callFunction_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_variables") ) { return ::hx::Val( get_variables_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool HaxeParser_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"parser") ) { outValue = ( parser ); return true; }
	}
	return false;
}

::hx::Val HaxeParser_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"interp") ) { interp=inValue.Cast<  ::hscript::Interp >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool HaxeParser_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"parser") ) { parser=ioValue.Cast<  ::hscript::Parser >(); return true; }
	}
	return false;
}

void HaxeParser_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("interp",d4,79,86,9e));
	outFields->push(HX_("variables",b7,e2,62,82));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo HaxeParser_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::hscript::Interp */ ,(int)offsetof(HaxeParser_obj,interp),HX_("interp",d4,79,86,9e)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo HaxeParser_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::hscript::Parser */ ,(void *) &HaxeParser_obj::parser,HX_("parser",df,9c,88,ed)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String HaxeParser_obj_sMemberFields[] = {
	HX_("interp",d4,79,86,9e),
	HX_("get_variables",8e,b6,c6,43),
	HX_("callFunction",d6,4d,95,4c),
	HX_("addCallback",06,d1,62,b0),
	::String(null()) };

static void HaxeParser_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(HaxeParser_obj::parser,"parser");
};

#ifdef HXCPP_VISIT_ALLOCS
static void HaxeParser_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(HaxeParser_obj::parser,"parser");
};

#endif

::hx::Class HaxeParser_obj::__mClass;

static ::String HaxeParser_obj_sStaticFields[] = {
	HX_("parser",df,9c,88,ed),
	::String(null())
};

void HaxeParser_obj::__register()
{
	HaxeParser_obj _hx_dummy;
	HaxeParser_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxeparser.HaxeParser",0e,52,74,79);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &HaxeParser_obj::__GetStatic;
	__mClass->mSetStaticField = &HaxeParser_obj::__SetStatic;
	__mClass->mMarkFunc = HaxeParser_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(HaxeParser_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(HaxeParser_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< HaxeParser_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = HaxeParser_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HaxeParser_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HaxeParser_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void HaxeParser_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_ad012f74e8a2eef6_14_boot)
HXDLIN(  14)		parser =  ::hscript::Parser_obj::__alloc( HX_CTX );
            	}
}

} // end namespace haxeparser
