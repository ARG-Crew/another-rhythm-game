// Generated by Haxe 4.2.0
#include <hxcpp.h>

#ifndef INCLUDED_Button
#include <Button.h>
#endif
#ifndef INCLUDED_InitialState
#include <InitialState.h>
#endif
#ifndef INCLUDED_NoteOffsetState
#include <NoteOffsetState.h>
#endif
#ifndef INCLUDED_Palette
#include <Palette.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Settings
#include <Settings.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxeparser_HaxeParser
#include <haxeparser/HaxeParser.h>
#endif
#ifndef INCLUDED_hxAddons_HxBitmapSprite
#include <hxAddons/HxBitmapSprite.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_14_new,"PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",14,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_32_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",32,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_52_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",52,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_65_parseChart,"PlayState","parseChart",0xfbad591c,"PlayState.parseChart","PlayState.hx",65,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_28_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",28,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_29_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",29,0xb30d7781)

void PlayState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_14_new)
HXLINE(  25)		this->notes = ::cpp::VirtualArray_obj::__new(1)->init(0,::cpp::VirtualArray_obj::__new(3)->init(0,0)->init(1,0)->init(2,HX_("",00,00,00,00)));
HXLINE(  22)		this->level = HX_("default",c1,d8,c3,9b);
HXLINE(  21)		this->hscript = null();
HXLINE(  14)		super::__construct(TransIn,TransOut);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2f064378) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x0a05f89d) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0a05f89d;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_32_create)
HXLINE(  33)		::Palette_obj::parse(HX_("assets/palette.txt",31,cc,12,f7));
HXLINE(  35)		this->add( ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height,::Palette_obj::bg,null(),null()));
HXLINE(  37)		this->butts =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  38)		this->add(this->butts);
HXLINE(  39)		{
HXLINE(  39)			 ::flixel::group::FlxTypedGroup _hx_tmp = this->butts;
HXDLIN(  39)			_hx_tmp->add( ::Button_obj::__alloc( HX_CTX ,0,::Settings_obj::skin)).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(  39)			 ::flixel::group::FlxTypedGroup _hx_tmp1 = this->butts;
HXDLIN(  39)			_hx_tmp1->add( ::Button_obj::__alloc( HX_CTX ,1,::Settings_obj::skin)).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(  39)			 ::flixel::group::FlxTypedGroup _hx_tmp2 = this->butts;
HXDLIN(  39)			_hx_tmp2->add( ::Button_obj::__alloc( HX_CTX ,2,::Settings_obj::skin)).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(  39)			 ::flixel::group::FlxTypedGroup _hx_tmp3 = this->butts;
HXDLIN(  39)			_hx_tmp3->add( ::Button_obj::__alloc( HX_CTX ,3,::Settings_obj::skin)).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(  39)			 ::flixel::group::FlxTypedGroup _hx_tmp4 = this->butts;
HXDLIN(  39)			_hx_tmp4->add( ::Button_obj::__alloc( HX_CTX ,4,::Settings_obj::skin)).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(  39)			 ::flixel::group::FlxTypedGroup _hx_tmp5 = this->butts;
HXDLIN(  39)			_hx_tmp5->add( ::Button_obj::__alloc( HX_CTX ,5,::Settings_obj::skin)).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(  39)			 ::flixel::group::FlxTypedGroup _hx_tmp6 = this->butts;
HXDLIN(  39)			_hx_tmp6->add( ::Button_obj::__alloc( HX_CTX ,6,::Settings_obj::skin)).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(  39)			 ::flixel::group::FlxTypedGroup _hx_tmp7 = this->butts;
HXDLIN(  39)			_hx_tmp7->add( ::Button_obj::__alloc( HX_CTX ,7,::Settings_obj::skin)).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(  39)			 ::flixel::group::FlxTypedGroup _hx_tmp8 = this->butts;
HXDLIN(  39)			_hx_tmp8->add( ::Button_obj::__alloc( HX_CTX ,8,::Settings_obj::skin)).StaticCast<  ::flixel::FlxSprite >();
            		}
HXLINE(  41)		this->parseChart(::PlayState_obj::songName,::PlayState_obj::curDifficulty);
HXLINE(  43)		this->super::create();
HXLINE(  45)		::PlayState_obj::instance = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  46)		this->hscript =  ::haxeparser::HaxeParser_obj::__alloc( HX_CTX ,((HX_("assets/maps/",2c,50,0b,cf) + this->level) + HX_(".hx",be,42,23,00)));
HXLINE(  47)		this->hscript->addCallback(HX_("this",5e,06,fc,4c),::PlayState_obj::instance);
HXLINE(  48)		this->hscript->callFunction(HX_("create",fc,66,0f,7c),::cpp::VirtualArray_obj::__new(0));
            	}


void PlayState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_52_update)
HXLINE(  53)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  53)		if (_this->keyManager->checkStatusUnsafe(55,_this->status)) {
HXLINE(  54)			 ::flixel::FlxState nextState =  ::NoteOffsetState_obj::__alloc( HX_CTX ,::PlayState_obj::songName);
HXDLIN(  54)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  54)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE(  56)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  56)		if (_this1->keyManager->checkStatusUnsafe(27,_this1->status)) {
HXLINE(  57)			 ::flixel::FlxState nextState =  ::InitialState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(  57)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  57)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE(  59)		this->super::update(elapsed);
HXLINE(  61)		this->hscript->callFunction(HX_("update",09,86,05,87),::cpp::VirtualArray_obj::__new(1)->init(0,elapsed));
            	}


void PlayState_obj::parseChart(::String music,::String __o_difficulty){
            		::String difficulty = __o_difficulty;
            		if (::hx::IsNull(__o_difficulty)) difficulty = HX_("normal",27,72,69,30);
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_65_parseChart)
HXLINE(  66)		::Array< ::String > raw = ::sys::io::File_obj::getContent(((((HX_("assets/charts/",ee,6b,d2,ad) + music) + HX_("/",2f,00,00,00)) + difficulty) + HX_(".txt",02,3f,c0,1e))).split(HX_("\n",0a,00,00,00));
HXLINE(  67)		{
HXLINE(  67)			int _g = 0;
HXDLIN(  67)			while((_g < raw->length)){
HXLINE(  67)				::String i = raw->__get(_g);
HXDLIN(  67)				_g = (_g + 1);
HXLINE(  69)				::Array< ::String > note = i.split(HX_(" ",20,00,00,00));
HXLINE(  70)				::cpp::VirtualArray _hx_tmp = this->notes;
HXDLIN(  70)				 ::Dynamic _hx_tmp1 = ::Std_obj::parseInt(note->__get(0));
HXDLIN(  70)				Float _hx_tmp2 = ::Std_obj::parseFloat(note->__get(1));
HXDLIN(  70)				_hx_tmp->push(::cpp::VirtualArray_obj::__new(3)->init(0,_hx_tmp1)->init(1,_hx_tmp2)->init(2,note->__get(2)));
HXLINE(  71)				 ::Dynamic _hx_tmp3 = ::haxe::Log_obj::trace;
HXDLIN(  71)				::String _hx_tmp4 = ((HX_("",00,00,00,00) + ::Std_obj::parseInt(note->__get(0))) + HX_(", ",74,26,00,00));
HXDLIN(  71)				::String _hx_tmp5 = ((_hx_tmp4 + ::Std_obj::parseFloat(note->__get(1))) + HX_(", ",74,26,00,00));
HXDLIN(  71)				_hx_tmp3((_hx_tmp5 + note->__get(2)),::hx::SourceInfo(HX_("source/PlayState.hx",75,24,2b,b8),71,HX_("PlayState",5d,83,c2,46),HX_("parseChart",ab,e3,94,6f)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,parseChart,(void))

 ::PlayState PlayState_obj::instance;

::String PlayState_obj::songName;

::String PlayState_obj::curDifficulty;


::hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	PlayState_obj *__this = (PlayState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(butts,"butts");
	HX_MARK_MEMBER_NAME(hscript,"hscript");
	HX_MARK_MEMBER_NAME(level,"level");
	HX_MARK_MEMBER_NAME(notes,"notes");
	 ::flixel::addons::ui::FlxUIState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(butts,"butts");
	HX_VISIT_MEMBER_NAME(hscript,"hscript");
	HX_VISIT_MEMBER_NAME(level,"level");
	HX_VISIT_MEMBER_NAME(notes,"notes");
	 ::flixel::addons::ui::FlxUIState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PlayState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"butts") ) { return ::hx::Val( butts ); }
		if (HX_FIELD_EQ(inName,"level") ) { return ::hx::Val( level ); }
		if (HX_FIELD_EQ(inName,"notes") ) { return ::hx::Val( notes ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hscript") ) { return ::hx::Val( hscript ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"parseChart") ) { return ::hx::Val( parseChart_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PlayState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { outValue = ( instance ); return true; }
		if (HX_FIELD_EQ(inName,"songName") ) { outValue = ( songName ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"curDifficulty") ) { outValue = ( curDifficulty ); return true; }
	}
	return false;
}

::hx::Val PlayState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"butts") ) { butts=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"level") ) { level=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"notes") ) { notes=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hscript") ) { hscript=inValue.Cast<  ::haxeparser::HaxeParser >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool PlayState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { instance=ioValue.Cast<  ::PlayState >(); return true; }
		if (HX_FIELD_EQ(inName,"songName") ) { songName=ioValue.Cast< ::String >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"curDifficulty") ) { curDifficulty=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("butts",00,3b,f3,ba));
	outFields->push(HX_("hscript",73,8c,18,2c));
	outFields->push(HX_("level",84,15,63,72));
	outFields->push(HX_("notes",41,dc,ca,9f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,butts),HX_("butts",00,3b,f3,ba)},
	{::hx::fsObject /*  ::haxeparser::HaxeParser */ ,(int)offsetof(PlayState_obj,hscript),HX_("hscript",73,8c,18,2c)},
	{::hx::fsString,(int)offsetof(PlayState_obj,level),HX_("level",84,15,63,72)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(PlayState_obj,notes),HX_("notes",41,dc,ca,9f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo PlayState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::PlayState */ ,(void *) &PlayState_obj::instance,HX_("instance",95,1f,e1,59)},
	{::hx::fsString,(void *) &PlayState_obj::songName,HX_("songName",c0,d0,d7,36)},
	{::hx::fsString,(void *) &PlayState_obj::curDifficulty,HX_("curDifficulty",db,b7,38,a7)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_("butts",00,3b,f3,ba),
	HX_("hscript",73,8c,18,2c),
	HX_("level",84,15,63,72),
	HX_("notes",41,dc,ca,9f),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("parseChart",ab,e3,94,6f),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::instance,"instance");
	HX_MARK_MEMBER_NAME(PlayState_obj::songName,"songName");
	HX_MARK_MEMBER_NAME(PlayState_obj::curDifficulty,"curDifficulty");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::instance,"instance");
	HX_VISIT_MEMBER_NAME(PlayState_obj::songName,"songName");
	HX_VISIT_MEMBER_NAME(PlayState_obj::curDifficulty,"curDifficulty");
};

#endif

::hx::Class PlayState_obj::__mClass;

static ::String PlayState_obj_sStaticFields[] = {
	HX_("instance",95,1f,e1,59),
	HX_("songName",c0,d0,d7,36),
	HX_("curDifficulty",db,b7,38,a7),
	::String(null())
};

void PlayState_obj::__register()
{
	PlayState_obj _hx_dummy;
	PlayState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("PlayState",5d,83,c2,46);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PlayState_obj::__GetStatic;
	__mClass->mSetStaticField = &PlayState_obj::__SetStatic;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PlayState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PlayState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_28_boot)
HXDLIN(  28)		songName = HX_("MOLLY",b7,73,4c,8a);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_29_boot)
HXDLIN(  29)		curDifficulty = HX_("normal",27,72,69,30);
            	}
}

